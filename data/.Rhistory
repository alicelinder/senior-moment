x = 8 + 3
y = log (2)
z = ((121/3) * (6^3))/(pi)
x + y
z = x * y
z
##  coding for the mammogram problem
##  begin with one set of women
##  set parameters and initialize
#last 4 number of Harvard ID to get reproducible results
prob.false.positive = 0.05
num.women = 50
#last 4 number of Harvard ID to get reproducible results
set.seed(2401)
## initialize population
## default for function vector() sets values to 0
## This call to vector() creates a numeric vector
##    of length num.women, with all values = 0
test.result = vector("numeric", num.women)
prob=c(1 - prob.false.positive, prob.false.positive),
test.result = vector("numeric", num.women)
## now sample from test results
##    using function sample()
## Type help(sample) for a complete explanation of
##    the function
##  0 = neg result, 1 = post result
test.result = sample(c(0,1), size = num.women,
prob=c(1 - prob.false.positive, prob.false.positive),
replace = TRUE) #don't want a 0 for the first one
View(as.matrix(test.result))
prob.false.positive = 0.05
num.women = 50
num.replicates = 5000
set.seed(2401)
## initialize for replicates
at.least.one.pos = vector("numeric", num.replicates)
## Nest earlier simulation in a `for' loop which
##    repeats the 50 mammograms num.replicates times
##  Record in each for() loop whether or not at least one
##    test was positive
for(ii in 1:num.replicates){
test.result = vector("numeric", num.women)
test.result = sample(c(0,1), size = num.women,
prob=c(1 - prob.false.positive, prob.false.positive),
replace = TRUE)
num.pos.tests = sum(test.result)
## at least one positive test?
at.least.one.pos[ii] = (num.pos.tests > 0)
}
## Now calculate the proportion of replicates that produced
##   at least one positive test
sum(at.least.one.pos)/num.replicates
x1 = 8.2
x2 = 14.5
s1 = 10.7
s2 = 8.2
n1 = 20
n2 = 5
t = (x2 - x1)/sqrt((s1^2/n1) + (s2^2/n2))
t
p = 2*pt(t, (n-1), lower.tail = FALSE)
p
df = min(n1-1, n2-1)
p = 2*pt(t, df, lower.tail = FALSE)
p
```
df = min(n1-1, n2-1)
t.star = qt(.975, df)
upper.bound = x2 - x1 + t.star*sqrt((s1^2 + s2^2)/n)
lower.bound = x2 - x1 - t.star*sqrt((s1^2 + s2^2)/n)
df = min(n1-1, n2-1)
t.star = qt(.975, df)
upper.bound = x2 - x1 + t.star*sqrt((s1^2/n1) + (s2^2/n2))
lower.bound = x2 - x1 - t.star*sqrt((s1^2 + s2^2)/n)
upper.bound
lower.bound
upper.bound = x2 - x1 + t.star*sqrt((s1^2/n1) + (s2^2/n2))
lower.bound = x2 - x1 - t.star*sqrt((s1^2/n1) + (s2^2/n2))
upper.bound
lower.bound
upper.bound = x2 - x1 + t.star*sqrt((s1^2/n1) + (s2^2/n2))
lower.bound = x2 - x1 - t.star*sqrt((s1^2/n1) + (s2^2/n2))
upper.bound
lower.bound
n1 = 165
n2 = 212
x1 = 5.08
x2 = 4.33
df = min(n1-1, n2-1)
t.star = qt(.975, df)
upper.bound = x2 - x1 + t.star*sqrt((s1^2/n1) + (s2^2/n2))
lower.bound = x2 - x1 - t.star*sqrt((s1^2/n1) + (s2^2/n2))
upper.bound
lower.bound
n1 = 165
n2 = 212
x1 = 5.08
x2 = 4.33
s1 = 1.15
s2 = 1.16
df = min(n1-1, n2-1)
t.star = qt(.975, df)
upper.bound = x2 - x1 + t.star*sqrt((s1^2/n1) + (s2^2/n2))
lower.bound = x2 - x1 - t.star*sqrt((s1^2/n1) + (s2^2/n2))
upper.bound
lower.bound
8/7
pi
e
exp
help('help')
help
x<-4
y<-5
x+y
x <- "Hello"
print(x)
x + y
x <- 4
y < x
y <- x
objectname <- c(1, 2, 3, 4, 5)
string <- (hi, 1 ,2)
string <- c (1, 2, 3, 4, 5)
stringletter <- (hello, hi, hey)
stringletter <- ("hello", "hi", "hey")
stringletter <- c(hello, hi, hey)
stringletter <- c("hello", "hi", "hey")
strings <- c(stringletter, string)
help('Map')
plot(test.result)
plot(test.result, xlab = index)
plot(test.result, xlab = "index")
help('ggplot')
help("ggplot")
help("gg")
REUdata <- read.csv("https://raw.githubusercontent.com/HarvardForest/Rworkshop/master/data/REUdata.csv")
View(REUdata)
REUdata <- read.csv('../data/REUdata.csv')
summary(REUdata)
summary(REUdata)
str(REUdata)
class(REUdata)
mode(REUdata)
table(REUdata[,'Programming.Experience'])
is.numeric(REUdata[,'Programming.Experience'])
name.1 <- substr(REUdata[,1],1,3)
table(name.1)
View(name.1)
table(REUdata$Pirates.or.Ninjas)
'p',NA,'p','n',NA,'n','n',NA)
pirates.or.ninjas <- c('p','n','p',NA,'p','n',
'n','p',NA,NA,NA,'p','p',NA,
'p',NA,'p','n',NA,'n','n',NA)
REUdata[14, ]
REUdata[14,"clean.Pirates.Ninjas"]
table(REUdata$clean.Pirates.Ninjas)
REUdata$Pirates.or.Ninjas
REUdata[14, ]
REUdata[14,"clean.Pirates.Ninjas"]
table(REUdata$clean.Pirates.Ninjas)
names(REUdata)
REUdata$Pirates.or.Ninjas
REUdata[14, ]
REUdata[14,"clean.Pirates.Ninjas"]
table(REUdata$clean.Pirates.Ninjas)
names(REUdata)
REUdata[,"clean.Pirates.Ninjas"] <- pirates.or.ninjas
names(REUdata)
REUdata$Pirates.or.Ninjas
REUdata[14, ]
REUdata[14,"clean.Pirates.Ninjas"]
table(REUdata$clean.Pirates.Ninjas)
REUdata[10, ]
REUdata[10,"clean.Pirates.Ninjas"]
REUdata$Pirates.or.Ninjas
REUdata[14, ]
REUdata[14,"clean.Pirates.Ninjas"]
REUdata[14,"clean.Pirates.Ninjas"] <- "n"
REUdata[10,"clean.Pirates.Ninjas"] <- "p"
REUdata[10, ]
REUdata[11,"clean.Pirates.Ninjas"] <- "p"
REUdata[19,"clean.Pirates.Ninjas"] <- "p"
REUdata[19,"clean.Pirates.Ninjas"] <- "p"
REUdata[22,"clean.Pirates.Ninjas"] <- "p"
REUdata[16,"clean.Pirates.Ninjas"] <- "n"
REUdata$clean.Pirates.Ninjas == "p"
table(REUdata$clean.Pirates.Ninjas)
plot(lm(REUdata$I.have.used.R ~ REUdata$Programming.Experience))
plot(REUdata$I.have.used.R ~ REUdata$Programming.Experience)
t.test(REUdata$I.have.used.R ~ REUdata$Programming.Experience)
t.test(REUdata$Programming.Experience ~ REUdata$I.have.used.R)
plot(REUdata$Programming.Experience ~ REUdata$I.have.used.R)
REUdata[!(REUdata[,"Pirates.or.Ninjas"] == "Pirates" |
REUdata[,"Pirates.or.Ninjas"] == "Ninjas"),"Pirates.or.Ninjas"] <- NA
## Visualize patterns
REUdata[,REUdata$Pirates.or.Ninjas] !== "Pirates" | REUdata[,REUdata$Pirates.or.Ninjas] !== "Ninjas"<- NA
REUdata[,REUdata$Pirates.or.Ninjas] != "Pirates" | REUdata[,REUdata$Pirates.or.Ninjas] != "Ninjas"<- NA
REUdata(![REUdata$Pirates.or.Ninjas] == "Pirates" | REUdata[,REUdata$Pirates.or.Ninjas] == "Ninjas"), REUdata$Pirates.or.Ninjas]<- NA
REUdata(![REUdata$Pirates.or.Ninjas == "Pirates" | REUdata[,REUdata$Pirates.or.Ninjas] == "Ninjas"), REUdata$Pirates.or.Ninjas]<- NA
REUdata(![REUdata$Pirates.or.Ninjas == "Pirates" | REUdata$Pirates.or.Ninjas == "Ninjas"), REUdata$Pirates.or.Ninjas]<- NA
REUdata!([REUdata$Pirates.or.Ninjas == "Pirates" | REUdata$Pirates.or.Ninjas == "Ninjas"), REUdata$Pirates.or.Ninjas]<- NA
REUdata!([REUdata$Pirates.or.Ninjas == "Pirates" | REUdata$Pirates.or.Ninjas == "Ninjas"), "Pirates.or.Ninjas"]<- NA
REUdata[!(REUdata$Pirates.or.Ninjas == "Pirates" | REUdata$Pirates.or.Ninjas == "Ninjas"), "Pirates.or.Ninjas"]<- NA
REUdata[!(REUdata[,"Pirates.or.Ninjas"] == "Pirates" | REUdata[,"Pirates.or.Ninjas"] == "Ninjas"), "Pirates.or.Ninjas"]<- NA
REUdata[!(REUdata[,"Pirates.or.Ninjas"] == "Pirates" | REUdata[,"Pirates.or.Ninjas"] == "Ninjas"),"Pirates.or.Ninjas"]<- NA
REUdata[!(REUdata[,"Pirates.or.Ninjas"] == "Pirates" | REUdata[,"Pirates.or.Ninjas"] == "Ninjas"),"Pirates.or.Ninjas"] <- NA
library(gdata)
d <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.xlsx")
install.packages("gdata")
library(gdata)
library(gdata)
install.packages("gdata")
d <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.xlsx")
install.packages("gdata")
d <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.xlsx")
library(gdata)
d <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.xlsx")
splist <- read.xls("~/Dropbox/Work/Harvard/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_arbres.xlsx")
splist <- read.xls("~/Dropbox/Work/Harvard/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_arbres.xlsx")
head(d)
names(d) <- c('no','Transect','sp','DBH','age')
names(splist) <- c('sp','Latin')
install.packages("spaa")
library(spaa)
splist <- read.xls("~/Dropbox/Work/Harvard/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_arbres.xlsx")
splist <- read.xls("~/Dropbox/Work/Harvard/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_arbres.xlsx")
head(d)
names(d) <- c('no','Transect','sp','DBH','age')
names(splist) <- c('sp','Latin')
d <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.csv")
install.packages("gdata")
install.packages("gdata")
library(gdata)
d <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.csv")
d <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.csv")
splist <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_arbres.csv")
head(d)
names(d) <- c('no','Transect','sp','DBH','age')
names(splist) <- c('sp','Latin')
library(ggplot2)
plot(age ~ DBH, data = d)
ggplot(d, aes(DBH, age, color = sp)) + geom_point()
(treesp <- sort(table(d$sp), decreasing=T))
(commonsp <- names(sort(table(d$sp), decreasing=T))[1:10])
treesp <- as.data.frame(treesp)
treesp$sp <- rownames(treesp)
treesp <- merge(splist, treesp)
treesp[order(treesp$treesp, decreasing=T),][1:10,]
d <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Herbacées.csv")
splist <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_herb.csv")
splist <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_herb.csv")
head(d)
names(d) <- c('no','Transect','sp','DBH','age')
names(splist) <- c('sp','Latin')
names(d) <- c('Transect','Code','recouv','herb')
names(splist) <- c('sp','Latin')
library(ggplot2)
(understorysp <- sort(table(d$sp), decreasing=T))
(commonundersp <- names(sort(table(d$sp), decreasing=T))[1:10])
d <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Herbacées.csv")
splist <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_herb.csv")
head(d)
names(d) <- c('Transect','Code','recouv','herb')
names(splist) <- c('sp','Latin')
library(ggplot2)
plot(age ~ DBH, data = d)
(understorysp <- sort(table(d$sp), decreasing=T))
(understorysp <- sort(table(d$Code), decreasing=T))
(commonundersp <- names(sort(table(d$Code), decreasing=T))[1:10])
(commonundersp <- names(sort(table(d$Code), decreasing=T))[1:15])
understorysp <- as.data.frame(understorysp)
understorysp$Code <- rownames(understorysp)
understorysp <- merge(splist, understorysp)
View(understorysp)
View(understorysp)
(understorysp <- sort(table(d$Code), decreasing=T))
(commonundersp <- names(sort(table(d$Code), decreasing=T))[1:15])
understorysp <- as.data.frame(understorysp)
understorysp$Code <- rownames(understorysp)
splist <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_herb.csv")
understorysp <- merge(splist, understorysp)
understorysp[order(understorysp$understorysp, decreasing=T),][1:10,]
understorysp[order(understorysp$understorysp, decreasing=T),][1:15,]
understorysp[order(understorysp$understorysp, decreasing=T),][1:20,]
View(treesp)
d <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.csv")
splist <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_arbres.csv")
head(d)
names(d) <- c('no','Transect','sp','DBH','age')
names(splist) <- c('sp','Latin')
library(ggplot2)
(treesp <- sort(table(d$sp), decreasing=T))
# Top 10 most common species
(commonsp <- names(sort(table(d$sp), decreasing=T))[1:10])
#
treesp <- as.data.frame(treesp)
treesp$sp <- rownames(treesp)
treesp <- merge(splist, treesp)
treesp[order(treesp$treesp, decreasing=T),][1:10,]
treesp[order(treesp$treesp, decreasing=T),][1:20,]
d <- read.csv("~/Dropbox/Summer 2016 Forest/Scripts/Sorame.csv")
head(d)
d <- d[!is.na(d$Latitude),]
library(maptools)
ds <- SpatialPointsDataFrame(d[,c("Longitude","Latitude")], d)
kmlPoints(ds, kmlfile = "SHind.kml", description = ds$Individual, name = ds$Individual)
write(dsk$content, file="WM.kml")
dsk <- kmlPoints(ds, kmlfile = "SHind.kml", description = ds$Individual, name = ds$Individual)
write(dsk$content, file="WM.kml")
rm(list=ls()) # remove everything currently held in the R memory
d <- read.csv("~/Dropbox/Summer 2016 Forest/Scripts/Sorame.csv")
head(d)
d <- d[!is.na(d$Latitude),]
library(maptools)
ds <- SpatialPointsDataFrame(d[,c("Longitude","Latitude")], d)
dsk <- kmlPoints(ds, kmlfile = "SHind.kml", description = ds$Individual, name = ds$Individual)
dsk <- kmlPoints(ds, kmlfile = "Sorame.kml", description = ds$Individual, name = ds$Individual)
write(dsk$content, file=".kml")
write(dsk$content, file="sorame.kml")
help("write")
kmlPoints(ds, kmlfile = "Sorame.kml", description = ds$Individual, name = ds$Individual)
write(ds$content, file="Sorame.kml")
sample(2:16, 2)
sample(2:16, 2, replace = FALSE)
install.packages("sjPlot")
load("CHVols.RData")
rm(list = ls())
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/senior-moment/data")
source("Fig2-source.R")
rm(list = ls())
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/senior-moment/data")
load("CHVols.RData")
chvols.focal <- chvols.focal[-which(chvols.focal$sp == "HAMVIR"),]
chvols.focal <- chvols.focal[-which(chvols.focal$sp == "SORAME"),]
myspecieslist <- unique(chvols.focal$sp)
mycolors <- rep(c("#1B9E77", "#D95F02", "#7570B3", "#E7298A", "#66A61E", "#E6AB02"), 10) # need 6 really!
plot(chvols.focal$lat, chvols.focal$relative.vol, type="n", main="Relative Convex Hull Volume across Latitudes", xlab="Latitude", ylab="Relative Convex Hull Volume")
for (i in c(1:length(myspecieslist))){
subby <- subset(chvols.focal, sp==myspecieslist[i])
points(subby$lat, subby$relative.vol, col=mycolors[i], pch="O")
}
abline(638.557, -14.02, col="#1B9E77", lwd =2)
abline(-175.71, 4.19, col="#D95F02", lwd = 2)
abline(-144.277, 3.375, col="#7570B3", lwd = 2)
abline(93.3, -2, col="#E7298A", lwd = 2)
legend('topright', legend=c("A. pensylvanicum", "B. papyrifera", "C. alternifolia", "F. grandifola"),
lty=1, col=mycolors, bty='n', cex=1)
lm(chvols.focal$lat ~ chvols.focal$relative.vol)
lm(chvols.focal$lat[sp == "ACEPEN",] ~ chvols.focal$relative.vol[sp == "ACEPEN"])
head(chvols.focal)
lm(chvols.focal$lat[chvols.focal$sp == "ACEPEN",] ~ chvols.focal$relative.volchvols$[sp == "ACEPEN"])
lm(chvols.focal$lat[chvols.focal$sp == "ACEPEN",] ~ chvols.focal$relative.volchvols$[chvols.focal$sp == "ACEPEN"])
lm(chvols.focal$lat[chvols.focal$sp == "ACEPEN",] ~ chvols.focal$relative.vol[chvols.focal$sp == "ACEPEN"])
lm(chvols.focal$lat[chvols.focal$sp == "ACEPEN",] ~ chvols.focal[chvols.focal$sp == "ACEPEN",]$relative.vol)
lm(chvols.focal[chvols.focal$sp == "ACEPEN",]$lat ~ chvols.focal[chvols.focal$sp == "ACEPEN",]$relative.vol)
lm(chvols.focal[chvols.focal$sp == "ACEPEN",]$relative.vol ~ chvols.focal[chvols.focal$sp == "ACEPEN",]$lat)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir='..//data')
source("Fig1-MDS.R")
library(vegan)
library(dplyr)
library(tidyr)
library(reshape)
library(plyr)
library(reshape2)
library(ggplot2)
rm(list = ls())
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/senior-moment/data")
load("NMDS Output.RData")
d <- read.csv("all.species.dbh.csv", row.names = NULL)
d <- d[,1:3]
overstory <- distinct(d)
d <- melt(overstory, id = "Individual", measure.vars = "Comp.Species" )
over.all <- as.data.frame(acast(d, Individual ~ value, length))
over.all <- t(over.all)
richness <- apply(over.all, 2, sum)
overcomp <- data.frame(mds1$points)
overcomp$s <- richness # add our species richness calculations to this data frame
overcomp$sp <- substr(rownames(overcomp), 1, 6)
overcomp$site <- unlist(
lapply(strsplit(rownames(overcomp), "_"),
function(x) x[[2]]))
overcomp$site <- as.factor(overcomp$site)
levels(overcomp$site) <- c(3, 1, 4, 2)
overcomp$site <- factor(as.numeric(as.character(overcomp$site)), labels = c("HF", "WM", "GR", "SH"))
colz = alpha(c("#E7298A", "#1B9E77", "#D95F02", "#7570B3"), 0.5)
save(overcomp, file="Overstory.RData")
save(mds1, file="MDS1.RData")
load("MDS1.RData")
load("Overstory.RData")
plot(mds1, type = "n",
xlim = c(-2, 2),
ylim = c(-1.2, 2))
count = 1
for(i in unique(overcomp$site)){
ordihull(mds1, group = overcomp$site, label = F,
draw = "polygon", col = colz[count],
show.groups = i)
count = count + 1
}
d2 <- read.csv("understory.csv")
rownames(d2) = d2[,1] # move species names into rows
d2 <- d2[,-1]
richness <- apply(d2, 2, sum)
undercomp <- data.frame(mds2$points)
undercomp$s <- richness # add our species richness calculations to this data frame
undercomp$sp <- substr(rownames(undercomp), 1, 6)
undercomp$site <- unlist(
lapply(strsplit(rownames(undercomp), "_"),
function(x) x[[2]]))
undercomp$site <- as.factor(undercomp$site)
levels(undercomp$site) <- c(3, 1, 4, 2)
undercomp$site <- factor(as.numeric(as.character(undercomp$site)), labels = c("HF", "WM", "GR", "SH"))
colz = alpha(c("#E7298A", "#1B9E77", "#D95F02", "#7570B3"), 0.5)
plot(mds2, type = "n",
xlim = c(-1.5, 1.5),
ylim = c(-1.2, 2)
)
count = 1
for(i in unique(undercomp$site)){
ordihull(mds2, group = undercomp$site, label =F,
draw = "polygon", col = colz[count],
show.groups = i)
count = count + 1
}
save(undercomp, file="Understory.RData")
save(mds2, file="MDS2.RData")
