x = 8 + 3
y = log (2)
z = ((121/3) * (6^3))/(pi)
x + y
z = x * y
z
##  coding for the mammogram problem
##  begin with one set of women
##  set parameters and initialize
#last 4 number of Harvard ID to get reproducible results
prob.false.positive = 0.05
num.women = 50
#last 4 number of Harvard ID to get reproducible results
set.seed(2401)
## initialize population
## default for function vector() sets values to 0
## This call to vector() creates a numeric vector
##    of length num.women, with all values = 0
test.result = vector("numeric", num.women)
prob=c(1 - prob.false.positive, prob.false.positive),
test.result = vector("numeric", num.women)
## now sample from test results
##    using function sample()
## Type help(sample) for a complete explanation of
##    the function
##  0 = neg result, 1 = post result
test.result = sample(c(0,1), size = num.women,
prob=c(1 - prob.false.positive, prob.false.positive),
replace = TRUE) #don't want a 0 for the first one
View(as.matrix(test.result))
prob.false.positive = 0.05
num.women = 50
num.replicates = 5000
set.seed(2401)
## initialize for replicates
at.least.one.pos = vector("numeric", num.replicates)
## Nest earlier simulation in a `for' loop which
##    repeats the 50 mammograms num.replicates times
##  Record in each for() loop whether or not at least one
##    test was positive
for(ii in 1:num.replicates){
test.result = vector("numeric", num.women)
test.result = sample(c(0,1), size = num.women,
prob=c(1 - prob.false.positive, prob.false.positive),
replace = TRUE)
num.pos.tests = sum(test.result)
## at least one positive test?
at.least.one.pos[ii] = (num.pos.tests > 0)
}
## Now calculate the proportion of replicates that produced
##   at least one positive test
sum(at.least.one.pos)/num.replicates
x1 = 8.2
x2 = 14.5
s1 = 10.7
s2 = 8.2
n1 = 20
n2 = 5
t = (x2 - x1)/sqrt((s1^2/n1) + (s2^2/n2))
t
p = 2*pt(t, (n-1), lower.tail = FALSE)
p
df = min(n1-1, n2-1)
p = 2*pt(t, df, lower.tail = FALSE)
p
```
df = min(n1-1, n2-1)
t.star = qt(.975, df)
upper.bound = x2 - x1 + t.star*sqrt((s1^2 + s2^2)/n)
lower.bound = x2 - x1 - t.star*sqrt((s1^2 + s2^2)/n)
df = min(n1-1, n2-1)
t.star = qt(.975, df)
upper.bound = x2 - x1 + t.star*sqrt((s1^2/n1) + (s2^2/n2))
lower.bound = x2 - x1 - t.star*sqrt((s1^2 + s2^2)/n)
upper.bound
lower.bound
upper.bound = x2 - x1 + t.star*sqrt((s1^2/n1) + (s2^2/n2))
lower.bound = x2 - x1 - t.star*sqrt((s1^2/n1) + (s2^2/n2))
upper.bound
lower.bound
upper.bound = x2 - x1 + t.star*sqrt((s1^2/n1) + (s2^2/n2))
lower.bound = x2 - x1 - t.star*sqrt((s1^2/n1) + (s2^2/n2))
upper.bound
lower.bound
n1 = 165
n2 = 212
x1 = 5.08
x2 = 4.33
df = min(n1-1, n2-1)
t.star = qt(.975, df)
upper.bound = x2 - x1 + t.star*sqrt((s1^2/n1) + (s2^2/n2))
lower.bound = x2 - x1 - t.star*sqrt((s1^2/n1) + (s2^2/n2))
upper.bound
lower.bound
n1 = 165
n2 = 212
x1 = 5.08
x2 = 4.33
s1 = 1.15
s2 = 1.16
df = min(n1-1, n2-1)
t.star = qt(.975, df)
upper.bound = x2 - x1 + t.star*sqrt((s1^2/n1) + (s2^2/n2))
lower.bound = x2 - x1 - t.star*sqrt((s1^2/n1) + (s2^2/n2))
upper.bound
lower.bound
8/7
pi
e
exp
help('help')
help
x<-4
y<-5
x+y
x <- "Hello"
print(x)
x + y
x <- 4
y < x
y <- x
objectname <- c(1, 2, 3, 4, 5)
string <- (hi, 1 ,2)
string <- c (1, 2, 3, 4, 5)
stringletter <- (hello, hi, hey)
stringletter <- ("hello", "hi", "hey")
stringletter <- c(hello, hi, hey)
stringletter <- c("hello", "hi", "hey")
strings <- c(stringletter, string)
help('Map')
plot(test.result)
plot(test.result, xlab = index)
plot(test.result, xlab = "index")
help('ggplot')
help("ggplot")
help("gg")
REUdata <- read.csv("https://raw.githubusercontent.com/HarvardForest/Rworkshop/master/data/REUdata.csv")
View(REUdata)
REUdata <- read.csv('../data/REUdata.csv')
summary(REUdata)
summary(REUdata)
str(REUdata)
class(REUdata)
mode(REUdata)
table(REUdata[,'Programming.Experience'])
is.numeric(REUdata[,'Programming.Experience'])
name.1 <- substr(REUdata[,1],1,3)
table(name.1)
View(name.1)
table(REUdata$Pirates.or.Ninjas)
'p',NA,'p','n',NA,'n','n',NA)
pirates.or.ninjas <- c('p','n','p',NA,'p','n',
'n','p',NA,NA,NA,'p','p',NA,
'p',NA,'p','n',NA,'n','n',NA)
REUdata[14, ]
REUdata[14,"clean.Pirates.Ninjas"]
table(REUdata$clean.Pirates.Ninjas)
REUdata$Pirates.or.Ninjas
REUdata[14, ]
REUdata[14,"clean.Pirates.Ninjas"]
table(REUdata$clean.Pirates.Ninjas)
names(REUdata)
REUdata$Pirates.or.Ninjas
REUdata[14, ]
REUdata[14,"clean.Pirates.Ninjas"]
table(REUdata$clean.Pirates.Ninjas)
names(REUdata)
REUdata[,"clean.Pirates.Ninjas"] <- pirates.or.ninjas
names(REUdata)
REUdata$Pirates.or.Ninjas
REUdata[14, ]
REUdata[14,"clean.Pirates.Ninjas"]
table(REUdata$clean.Pirates.Ninjas)
REUdata[10, ]
REUdata[10,"clean.Pirates.Ninjas"]
REUdata$Pirates.or.Ninjas
REUdata[14, ]
REUdata[14,"clean.Pirates.Ninjas"]
REUdata[14,"clean.Pirates.Ninjas"] <- "n"
REUdata[10,"clean.Pirates.Ninjas"] <- "p"
REUdata[10, ]
REUdata[11,"clean.Pirates.Ninjas"] <- "p"
REUdata[19,"clean.Pirates.Ninjas"] <- "p"
REUdata[19,"clean.Pirates.Ninjas"] <- "p"
REUdata[22,"clean.Pirates.Ninjas"] <- "p"
REUdata[16,"clean.Pirates.Ninjas"] <- "n"
REUdata$clean.Pirates.Ninjas == "p"
table(REUdata$clean.Pirates.Ninjas)
plot(lm(REUdata$I.have.used.R ~ REUdata$Programming.Experience))
plot(REUdata$I.have.used.R ~ REUdata$Programming.Experience)
t.test(REUdata$I.have.used.R ~ REUdata$Programming.Experience)
t.test(REUdata$Programming.Experience ~ REUdata$I.have.used.R)
plot(REUdata$Programming.Experience ~ REUdata$I.have.used.R)
REUdata[!(REUdata[,"Pirates.or.Ninjas"] == "Pirates" |
REUdata[,"Pirates.or.Ninjas"] == "Ninjas"),"Pirates.or.Ninjas"] <- NA
## Visualize patterns
REUdata[,REUdata$Pirates.or.Ninjas] !== "Pirates" | REUdata[,REUdata$Pirates.or.Ninjas] !== "Ninjas"<- NA
REUdata[,REUdata$Pirates.or.Ninjas] != "Pirates" | REUdata[,REUdata$Pirates.or.Ninjas] != "Ninjas"<- NA
REUdata(![REUdata$Pirates.or.Ninjas] == "Pirates" | REUdata[,REUdata$Pirates.or.Ninjas] == "Ninjas"), REUdata$Pirates.or.Ninjas]<- NA
REUdata(![REUdata$Pirates.or.Ninjas == "Pirates" | REUdata[,REUdata$Pirates.or.Ninjas] == "Ninjas"), REUdata$Pirates.or.Ninjas]<- NA
REUdata(![REUdata$Pirates.or.Ninjas == "Pirates" | REUdata$Pirates.or.Ninjas == "Ninjas"), REUdata$Pirates.or.Ninjas]<- NA
REUdata!([REUdata$Pirates.or.Ninjas == "Pirates" | REUdata$Pirates.or.Ninjas == "Ninjas"), REUdata$Pirates.or.Ninjas]<- NA
REUdata!([REUdata$Pirates.or.Ninjas == "Pirates" | REUdata$Pirates.or.Ninjas == "Ninjas"), "Pirates.or.Ninjas"]<- NA
REUdata[!(REUdata$Pirates.or.Ninjas == "Pirates" | REUdata$Pirates.or.Ninjas == "Ninjas"), "Pirates.or.Ninjas"]<- NA
REUdata[!(REUdata[,"Pirates.or.Ninjas"] == "Pirates" | REUdata[,"Pirates.or.Ninjas"] == "Ninjas"), "Pirates.or.Ninjas"]<- NA
REUdata[!(REUdata[,"Pirates.or.Ninjas"] == "Pirates" | REUdata[,"Pirates.or.Ninjas"] == "Ninjas"),"Pirates.or.Ninjas"]<- NA
REUdata[!(REUdata[,"Pirates.or.Ninjas"] == "Pirates" | REUdata[,"Pirates.or.Ninjas"] == "Ninjas"),"Pirates.or.Ninjas"] <- NA
library(gdata)
d <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.xlsx")
install.packages("gdata")
library(gdata)
library(gdata)
install.packages("gdata")
d <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.xlsx")
install.packages("gdata")
d <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.xlsx")
library(gdata)
d <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.xlsx")
splist <- read.xls("~/Dropbox/Work/Harvard/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_arbres.xlsx")
splist <- read.xls("~/Dropbox/Work/Harvard/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_arbres.xlsx")
head(d)
names(d) <- c('no','Transect','sp','DBH','age')
names(splist) <- c('sp','Latin')
install.packages("spaa")
library(spaa)
splist <- read.xls("~/Dropbox/Work/Harvard/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_arbres.xlsx")
splist <- read.xls("~/Dropbox/Work/Harvard/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_arbres.xlsx")
head(d)
names(d) <- c('no','Transect','sp','DBH','age')
names(splist) <- c('sp','Latin')
d <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.csv")
install.packages("gdata")
install.packages("gdata")
library(gdata)
d <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.csv")
d <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.csv")
splist <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_arbres.csv")
head(d)
names(d) <- c('no','Transect','sp','DBH','age')
names(splist) <- c('sp','Latin')
library(ggplot2)
plot(age ~ DBH, data = d)
ggplot(d, aes(DBH, age, color = sp)) + geom_point()
(treesp <- sort(table(d$sp), decreasing=T))
(commonsp <- names(sort(table(d$sp), decreasing=T))[1:10])
treesp <- as.data.frame(treesp)
treesp$sp <- rownames(treesp)
treesp <- merge(splist, treesp)
treesp[order(treesp$treesp, decreasing=T),][1:10,]
d <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Herbacées.csv")
splist <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_herb.csv")
splist <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_herb.csv")
head(d)
names(d) <- c('no','Transect','sp','DBH','age')
names(splist) <- c('sp','Latin')
names(d) <- c('Transect','Code','recouv','herb')
names(splist) <- c('sp','Latin')
library(ggplot2)
(understorysp <- sort(table(d$sp), decreasing=T))
(commonundersp <- names(sort(table(d$sp), decreasing=T))[1:10])
d <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Herbacées.csv")
splist <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_herb.csv")
head(d)
names(d) <- c('Transect','Code','recouv','herb')
names(splist) <- c('sp','Latin')
library(ggplot2)
plot(age ~ DBH, data = d)
(understorysp <- sort(table(d$sp), decreasing=T))
(understorysp <- sort(table(d$Code), decreasing=T))
(commonundersp <- names(sort(table(d$Code), decreasing=T))[1:10])
(commonundersp <- names(sort(table(d$Code), decreasing=T))[1:15])
understorysp <- as.data.frame(understorysp)
understorysp$Code <- rownames(understorysp)
understorysp <- merge(splist, understorysp)
View(understorysp)
View(understorysp)
(understorysp <- sort(table(d$Code), decreasing=T))
(commonundersp <- names(sort(table(d$Code), decreasing=T))[1:15])
understorysp <- as.data.frame(understorysp)
understorysp$Code <- rownames(understorysp)
splist <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_herb.csv")
understorysp <- merge(splist, understorysp)
understorysp[order(understorysp$understorysp, decreasing=T),][1:10,]
understorysp[order(understorysp$understorysp, decreasing=T),][1:15,]
understorysp[order(understorysp$understorysp, decreasing=T),][1:20,]
View(treesp)
d <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.csv")
splist <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_arbres.csv")
head(d)
names(d) <- c('no','Transect','sp','DBH','age')
names(splist) <- c('sp','Latin')
library(ggplot2)
(treesp <- sort(table(d$sp), decreasing=T))
# Top 10 most common species
(commonsp <- names(sort(table(d$sp), decreasing=T))[1:10])
#
treesp <- as.data.frame(treesp)
treesp$sp <- rownames(treesp)
treesp <- merge(splist, treesp)
treesp[order(treesp$treesp, decreasing=T),][1:10,]
treesp[order(treesp$treesp, decreasing=T),][1:20,]
d <- read.csv("~/Dropbox/Summer 2016 Forest/Scripts/Sorame.csv")
head(d)
d <- d[!is.na(d$Latitude),]
library(maptools)
ds <- SpatialPointsDataFrame(d[,c("Longitude","Latitude")], d)
kmlPoints(ds, kmlfile = "SHind.kml", description = ds$Individual, name = ds$Individual)
write(dsk$content, file="WM.kml")
dsk <- kmlPoints(ds, kmlfile = "SHind.kml", description = ds$Individual, name = ds$Individual)
write(dsk$content, file="WM.kml")
rm(list=ls()) # remove everything currently held in the R memory
d <- read.csv("~/Dropbox/Summer 2016 Forest/Scripts/Sorame.csv")
head(d)
d <- d[!is.na(d$Latitude),]
library(maptools)
ds <- SpatialPointsDataFrame(d[,c("Longitude","Latitude")], d)
dsk <- kmlPoints(ds, kmlfile = "SHind.kml", description = ds$Individual, name = ds$Individual)
dsk <- kmlPoints(ds, kmlfile = "Sorame.kml", description = ds$Individual, name = ds$Individual)
write(dsk$content, file=".kml")
write(dsk$content, file="sorame.kml")
help("write")
kmlPoints(ds, kmlfile = "Sorame.kml", description = ds$Individual, name = ds$Individual)
write(ds$content, file="Sorame.kml")
sample(2:16, 2)
sample(2:16, 2, replace = FALSE)
knitr::opts_chunk$set(echo = TRUE)
source("Fig2-BA_vs_Lat.R")
rm(list=ls())
options(stringsAsFactors=FALSE)
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/senior-moment/data")
library(sp)
library(maptools)
library(raster)
library(rgeos)
library(sp)
library(rgdal)
library(spatstat)
distribution.matrix<-read.csv("Nam_trees_incidence_matrix_I.csv")
IDs.env.matrix<-read.csv("Ids_lon_lats.csv")
dim(IDs.env.matrix)
dim(distribution.matrix)
crswgs84=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
sorbus.amer=readShapePoly("sorbamer.shp",proj4string=crswgs84,verbose=TRUE)
plot(sorbus.amer)
points(IDs.env.matrix$longitude,IDs.env.matrix$latitude)
extent(sorbus.amer)
coords<-cbind(IDs.env.matrix$longitude,IDs.env.matrix$latitude)
lonlats<-SpatialPoints(coords,proj4string=crswgs84)
overlap<-over(lonlats,sorbus.amer)
sorbus<-subset(overlap,!is.na(AREA))
target.spp<-c("Acer.pensylvanicum","Betula.papyrifera","Cornus.alternifolia"
,"Fagus.grandifolia","Hamamelis.virginiana","Sorbus.americana")
distribution.matrix<-distribution.matrix[,c(1,which(colnames(distribution.matrix)%in%target.spp))]
dim(distribution.matrix)
distribution.matrix$FID<-distribution.matrix$FID+1
distribution.matrix<-subset(distribution.matrix,FID%in%IDs.env.matrix$Id)
IDs.env.matrix<-subset(IDs.env.matrix,Id%in%distribution.matrix$FID)
sum(IDs.env.matrix$Id==distribution.matrix$FID)
distribution.matrix$Sorbus.americana<-ifelse(!is.na(overlap$AREA),1,0)
head(distribution.matrix)
with(IDs.env.matrix,plot(longitude,latitude,
col=distribution.matrix$Sorbus.americana+1))
min.max.lats.each.sps<-as.data.frame(array(NA,dim=c(6,9)))
rownames(min.max.lats.each.sps)<-target.spp
colnames(min.max.lats.each.sps)<-c("minLat","maxLat","midLat","minTemp","maxTemp","midTemp",
"minPrec","maxPrec","midPrec")
for(i in 1:length(target.spp)){
spsi<-target.spp[i]
sps.i.dist<-distribution.matrix[,spsi]
sps.i.subset<-IDs.env.matrix[which(sps.i.dist==1),c("latitude","Avg_temper","Ann_precip")]
min.max.lats.each.sps[i,c(1,4,7)]<-apply(sps.i.subset,2,min)
min.max.lats.each.sps[i,c(2,5,8)]<-apply(sps.i.subset,2,max)
min.max.lats.each.sps[i,c(3,6,9)]<-apply(apply(sps.i.subset,2,range),2,mean)
}
head(IDs.env.matrix)
head(distribution.matrix)
coords.empirical<-read.csv("DBH.Lat.Long.csv") ## read from where you saved it
coords.empirical$species<-ifelse(grepl("ACEPEN",coords.empirical$Individual),"Acer.pensylvanicum",
ifelse(grepl("BETPAP",coords.empirical$Individual),"Betula.papyrifera",
ifelse(grepl("CORALT",coords.empirical$Individual),"Cornus.alternifolia",
ifelse(grepl("FAGGRA",coords.empirical$Individual),"Fagus.grandifolia",
ifelse(grepl("HAMVIR",coords.empirical$Individual),"Hamamelis.virginiana",
ifelse(grepl("SORAME",coords.empirical$Individual),"Sorbus.americana","Other"))))))
coords.empirical<-subset(coords.empirical,!is.na(Lat))
head(coords.empirical)
coords.empirical$index.in.env.matrix<-rep(NA,nrow(coords.empirical))
index.in.Id<-NULL
for(i in 1:nrow(coords.empirical)){
print(i)
each.dist<-NULL
euc.dist<-function(x){sqrt(sum((x - coords.empirical[i,c("Long","Lat")])^2))}
each.dist<-apply(IDs.env.matrix[,3:2],1,euc.dist)
IDs.env.matrix[which.min(each.dist),]
coords.empirical$index.in.env.matrix[i]<-which.min(each.dist)
}
coords.empirical$distance.to.climatic.centroid<-rep(NA,nrow(coords.empirical))
climatic.envelope.each.sps<-list()
for(i in 1:6){
spsi<-target.spp[i]
print(spsi)
coords.empirical.sub<-subset(coords.empirical,species==spsi)
indices<-coords.empirical.sub$index.in.env.matrix
climate.env.i<-IDs.env.matrix[,4:8]*distribution.matrix[,spsi]
climate.env.i<-subset(climate.env.i,Avg_temper!=0)
pca.spsi <- prcomp(climate.env.i,center = T,scale. = T)
pca.spsi$rotation=-pca.spsi$rotation
pca.spsi$x=-pca.spsi$x
pca.axis1<- pca.spsi$x[,1]
pca.axis2<- pca.spsi$x[,2]
#plot(pca.axis1,pca.axis2)
environment.centroid<-c(mean(pca.axis1),mean(pca.axis2))
climate.env.isub<-IDs.env.matrix[indices,4:8]
predicted.spi<-predict(pca.spsi,newdata=climate.env.isub)[,1:2]
## compute euclidean distances to centroid from each point
dist.to.centroid<-NULL
for(j in 1:nrow(predicted.spi)){
dist.to.centroid[j] <- sqrt(sum((predicted.spi[j,] - environment.centroid)^2))
}
## saving
climatic.envelope.each.sps[[i]]<-pca.spsi$x[,1:2]
coords.empirical[which(coords.empirical$species==spsi),"distance.to.climatic.centroid"]<-dist.to.centroid
}
View(coords.empirical)
write.csv(coords.empirical, "climatic_data.csv")
