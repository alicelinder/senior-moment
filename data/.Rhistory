set.seed(2401)
## initialize for replicates
at.least.one.pos = vector("numeric", num.replicates)
## Nest earlier simulation in a `for' loop which
##    repeats the 50 mammograms num.replicates times
##  Record in each for() loop whether or not at least one
##    test was positive
for(ii in 1:num.replicates){
test.result = vector("numeric", num.women)
test.result = sample(c(0,1), size = num.women,
prob=c(1 - prob.false.positive, prob.false.positive),
replace = TRUE)
num.pos.tests = sum(test.result)
## at least one positive test?
at.least.one.pos[ii] = (num.pos.tests > 0)
}
## Now calculate the proportion of replicates that produced
##   at least one positive test
sum(at.least.one.pos)/num.replicates
x1 = 8.2
x2 = 14.5
s1 = 10.7
s2 = 8.2
n1 = 20
n2 = 5
t = (x2 - x1)/sqrt((s1^2/n1) + (s2^2/n2))
t
p = 2*pt(t, (n-1), lower.tail = FALSE)
p
df = min(n1-1, n2-1)
p = 2*pt(t, df, lower.tail = FALSE)
p
```
df = min(n1-1, n2-1)
t.star = qt(.975, df)
upper.bound = x2 - x1 + t.star*sqrt((s1^2 + s2^2)/n)
lower.bound = x2 - x1 - t.star*sqrt((s1^2 + s2^2)/n)
df = min(n1-1, n2-1)
t.star = qt(.975, df)
upper.bound = x2 - x1 + t.star*sqrt((s1^2/n1) + (s2^2/n2))
lower.bound = x2 - x1 - t.star*sqrt((s1^2 + s2^2)/n)
upper.bound
lower.bound
upper.bound = x2 - x1 + t.star*sqrt((s1^2/n1) + (s2^2/n2))
lower.bound = x2 - x1 - t.star*sqrt((s1^2/n1) + (s2^2/n2))
upper.bound
lower.bound
upper.bound = x2 - x1 + t.star*sqrt((s1^2/n1) + (s2^2/n2))
lower.bound = x2 - x1 - t.star*sqrt((s1^2/n1) + (s2^2/n2))
upper.bound
lower.bound
n1 = 165
n2 = 212
x1 = 5.08
x2 = 4.33
df = min(n1-1, n2-1)
t.star = qt(.975, df)
upper.bound = x2 - x1 + t.star*sqrt((s1^2/n1) + (s2^2/n2))
lower.bound = x2 - x1 - t.star*sqrt((s1^2/n1) + (s2^2/n2))
upper.bound
lower.bound
n1 = 165
n2 = 212
x1 = 5.08
x2 = 4.33
s1 = 1.15
s2 = 1.16
df = min(n1-1, n2-1)
t.star = qt(.975, df)
upper.bound = x2 - x1 + t.star*sqrt((s1^2/n1) + (s2^2/n2))
lower.bound = x2 - x1 - t.star*sqrt((s1^2/n1) + (s2^2/n2))
upper.bound
lower.bound
8/7
pi
e
exp
help('help')
help
x<-4
y<-5
x+y
x <- "Hello"
print(x)
x + y
x <- 4
y < x
y <- x
objectname <- c(1, 2, 3, 4, 5)
string <- (hi, 1 ,2)
string <- c (1, 2, 3, 4, 5)
stringletter <- (hello, hi, hey)
stringletter <- ("hello", "hi", "hey")
stringletter <- c(hello, hi, hey)
stringletter <- c("hello", "hi", "hey")
strings <- c(stringletter, string)
help('Map')
plot(test.result)
plot(test.result, xlab = index)
plot(test.result, xlab = "index")
help('ggplot')
help("ggplot")
help("gg")
REUdata <- read.csv("https://raw.githubusercontent.com/HarvardForest/Rworkshop/master/data/REUdata.csv")
View(REUdata)
REUdata <- read.csv('../data/REUdata.csv')
summary(REUdata)
summary(REUdata)
str(REUdata)
class(REUdata)
mode(REUdata)
table(REUdata[,'Programming.Experience'])
is.numeric(REUdata[,'Programming.Experience'])
name.1 <- substr(REUdata[,1],1,3)
table(name.1)
View(name.1)
table(REUdata$Pirates.or.Ninjas)
'p',NA,'p','n',NA,'n','n',NA)
pirates.or.ninjas <- c('p','n','p',NA,'p','n',
'n','p',NA,NA,NA,'p','p',NA,
'p',NA,'p','n',NA,'n','n',NA)
REUdata[14, ]
REUdata[14,"clean.Pirates.Ninjas"]
table(REUdata$clean.Pirates.Ninjas)
REUdata$Pirates.or.Ninjas
REUdata[14, ]
REUdata[14,"clean.Pirates.Ninjas"]
table(REUdata$clean.Pirates.Ninjas)
names(REUdata)
REUdata$Pirates.or.Ninjas
REUdata[14, ]
REUdata[14,"clean.Pirates.Ninjas"]
table(REUdata$clean.Pirates.Ninjas)
names(REUdata)
REUdata[,"clean.Pirates.Ninjas"] <- pirates.or.ninjas
names(REUdata)
REUdata$Pirates.or.Ninjas
REUdata[14, ]
REUdata[14,"clean.Pirates.Ninjas"]
table(REUdata$clean.Pirates.Ninjas)
REUdata[10, ]
REUdata[10,"clean.Pirates.Ninjas"]
REUdata$Pirates.or.Ninjas
REUdata[14, ]
REUdata[14,"clean.Pirates.Ninjas"]
REUdata[14,"clean.Pirates.Ninjas"] <- "n"
REUdata[10,"clean.Pirates.Ninjas"] <- "p"
REUdata[10, ]
REUdata[11,"clean.Pirates.Ninjas"] <- "p"
REUdata[19,"clean.Pirates.Ninjas"] <- "p"
REUdata[19,"clean.Pirates.Ninjas"] <- "p"
REUdata[22,"clean.Pirates.Ninjas"] <- "p"
REUdata[16,"clean.Pirates.Ninjas"] <- "n"
REUdata$clean.Pirates.Ninjas == "p"
table(REUdata$clean.Pirates.Ninjas)
plot(lm(REUdata$I.have.used.R ~ REUdata$Programming.Experience))
plot(REUdata$I.have.used.R ~ REUdata$Programming.Experience)
t.test(REUdata$I.have.used.R ~ REUdata$Programming.Experience)
t.test(REUdata$Programming.Experience ~ REUdata$I.have.used.R)
plot(REUdata$Programming.Experience ~ REUdata$I.have.used.R)
REUdata[!(REUdata[,"Pirates.or.Ninjas"] == "Pirates" |
REUdata[,"Pirates.or.Ninjas"] == "Ninjas"),"Pirates.or.Ninjas"] <- NA
## Visualize patterns
REUdata[,REUdata$Pirates.or.Ninjas] !== "Pirates" | REUdata[,REUdata$Pirates.or.Ninjas] !== "Ninjas"<- NA
REUdata[,REUdata$Pirates.or.Ninjas] != "Pirates" | REUdata[,REUdata$Pirates.or.Ninjas] != "Ninjas"<- NA
REUdata(![REUdata$Pirates.or.Ninjas] == "Pirates" | REUdata[,REUdata$Pirates.or.Ninjas] == "Ninjas"), REUdata$Pirates.or.Ninjas]<- NA
REUdata(![REUdata$Pirates.or.Ninjas == "Pirates" | REUdata[,REUdata$Pirates.or.Ninjas] == "Ninjas"), REUdata$Pirates.or.Ninjas]<- NA
REUdata(![REUdata$Pirates.or.Ninjas == "Pirates" | REUdata$Pirates.or.Ninjas == "Ninjas"), REUdata$Pirates.or.Ninjas]<- NA
REUdata!([REUdata$Pirates.or.Ninjas == "Pirates" | REUdata$Pirates.or.Ninjas == "Ninjas"), REUdata$Pirates.or.Ninjas]<- NA
REUdata!([REUdata$Pirates.or.Ninjas == "Pirates" | REUdata$Pirates.or.Ninjas == "Ninjas"), "Pirates.or.Ninjas"]<- NA
REUdata[!(REUdata$Pirates.or.Ninjas == "Pirates" | REUdata$Pirates.or.Ninjas == "Ninjas"), "Pirates.or.Ninjas"]<- NA
REUdata[!(REUdata[,"Pirates.or.Ninjas"] == "Pirates" | REUdata[,"Pirates.or.Ninjas"] == "Ninjas"), "Pirates.or.Ninjas"]<- NA
REUdata[!(REUdata[,"Pirates.or.Ninjas"] == "Pirates" | REUdata[,"Pirates.or.Ninjas"] == "Ninjas"),"Pirates.or.Ninjas"]<- NA
REUdata[!(REUdata[,"Pirates.or.Ninjas"] == "Pirates" | REUdata[,"Pirates.or.Ninjas"] == "Ninjas"),"Pirates.or.Ninjas"] <- NA
library(gdata)
d <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.xlsx")
install.packages("gdata")
library(gdata)
library(gdata)
install.packages("gdata")
d <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.xlsx")
install.packages("gdata")
d <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.xlsx")
library(gdata)
d <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.xlsx")
splist <- read.xls("~/Dropbox/Work/Harvard/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_arbres.xlsx")
splist <- read.xls("~/Dropbox/Work/Harvard/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_arbres.xlsx")
head(d)
names(d) <- c('no','Transect','sp','DBH','age')
names(splist) <- c('sp','Latin')
install.packages("spaa")
library(spaa)
splist <- read.xls("~/Dropbox/Work/Harvard/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_arbres.xlsx")
splist <- read.xls("~/Dropbox/Work/Harvard/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_arbres.xlsx")
head(d)
names(d) <- c('no','Transect','sp','DBH','age')
names(splist) <- c('sp','Latin')
d <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.csv")
install.packages("gdata")
install.packages("gdata")
library(gdata)
d <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.csv")
d <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.csv")
splist <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_arbres.csv")
head(d)
names(d) <- c('no','Transect','sp','DBH','age')
names(splist) <- c('sp','Latin')
library(ggplot2)
plot(age ~ DBH, data = d)
ggplot(d, aes(DBH, age, color = sp)) + geom_point()
(treesp <- sort(table(d$sp), decreasing=T))
(commonsp <- names(sort(table(d$sp), decreasing=T))[1:10])
treesp <- as.data.frame(treesp)
treesp$sp <- rownames(treesp)
treesp <- merge(splist, treesp)
treesp[order(treesp$treesp, decreasing=T),][1:10,]
d <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Herbacées.csv")
splist <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_herb.csv")
splist <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_herb.csv")
head(d)
names(d) <- c('no','Transect','sp','DBH','age')
names(splist) <- c('sp','Latin')
names(d) <- c('Transect','Code','recouv','herb')
names(splist) <- c('sp','Latin')
library(ggplot2)
(understorysp <- sort(table(d$sp), decreasing=T))
(commonundersp <- names(sort(table(d$sp), decreasing=T))[1:10])
d <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Herbacées.csv")
splist <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_herb.csv")
head(d)
names(d) <- c('Transect','Code','recouv','herb')
names(splist) <- c('sp','Latin')
library(ggplot2)
plot(age ~ DBH, data = d)
(understorysp <- sort(table(d$sp), decreasing=T))
(understorysp <- sort(table(d$Code), decreasing=T))
(commonundersp <- names(sort(table(d$Code), decreasing=T))[1:10])
(commonundersp <- names(sort(table(d$Code), decreasing=T))[1:15])
understorysp <- as.data.frame(understorysp)
understorysp$Code <- rownames(understorysp)
understorysp <- merge(splist, understorysp)
View(understorysp)
View(understorysp)
(understorysp <- sort(table(d$Code), decreasing=T))
(commonundersp <- names(sort(table(d$Code), decreasing=T))[1:15])
understorysp <- as.data.frame(understorysp)
understorysp$Code <- rownames(understorysp)
splist <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_herb.csv")
understorysp <- merge(splist, understorysp)
understorysp[order(understorysp$understorysp, decreasing=T),][1:10,]
understorysp[order(understorysp$understorysp, decreasing=T),][1:15,]
understorysp[order(understorysp$understorysp, decreasing=T),][1:20,]
View(treesp)
d <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.csv")
splist <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_arbres.csv")
head(d)
names(d) <- c('no','Transect','sp','DBH','age')
names(splist) <- c('sp','Latin')
library(ggplot2)
(treesp <- sort(table(d$sp), decreasing=T))
# Top 10 most common species
(commonsp <- names(sort(table(d$sp), decreasing=T))[1:10])
#
treesp <- as.data.frame(treesp)
treesp$sp <- rownames(treesp)
treesp <- merge(splist, treesp)
treesp[order(treesp$treesp, decreasing=T),][1:10,]
treesp[order(treesp$treesp, decreasing=T),][1:20,]
d <- read.csv("~/Dropbox/Summer 2016 Forest/Scripts/Sorame.csv")
head(d)
d <- d[!is.na(d$Latitude),]
library(maptools)
ds <- SpatialPointsDataFrame(d[,c("Longitude","Latitude")], d)
kmlPoints(ds, kmlfile = "SHind.kml", description = ds$Individual, name = ds$Individual)
write(dsk$content, file="WM.kml")
dsk <- kmlPoints(ds, kmlfile = "SHind.kml", description = ds$Individual, name = ds$Individual)
write(dsk$content, file="WM.kml")
rm(list=ls()) # remove everything currently held in the R memory
d <- read.csv("~/Dropbox/Summer 2016 Forest/Scripts/Sorame.csv")
head(d)
d <- d[!is.na(d$Latitude),]
library(maptools)
ds <- SpatialPointsDataFrame(d[,c("Longitude","Latitude")], d)
dsk <- kmlPoints(ds, kmlfile = "SHind.kml", description = ds$Individual, name = ds$Individual)
dsk <- kmlPoints(ds, kmlfile = "Sorame.kml", description = ds$Individual, name = ds$Individual)
write(dsk$content, file=".kml")
write(dsk$content, file="sorame.kml")
help("write")
kmlPoints(ds, kmlfile = "Sorame.kml", description = ds$Individual, name = ds$Individual)
write(ds$content, file="Sorame.kml")
sample(2:16, 2)
sample(2:16, 2, replace = FALSE)
install.packages("sjPlot")
rm(list = ls())
options(stringsAsFactors = FALSE)
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/senior-moment/data")
# setwd("~/Documents/git/senior-moment/data")
# LIBRARIES HERE
library(geometry)
library(FD)
library(plyr)
library(dplyr)
library(reshape2)
library(stringr)
# load data
tree.traits <- read.csv("tree-traits.csv")
# remove Distance, bottom.angle, top.angle, bottom.m, Top.m
tree.traits <- tree.traits[,-13:-17]
# remove DBH.1-DBH.5, notes, route, and date sampled
tree.traits <- tree.traits[,-14:-21]
# calculate stem density
tree.traits$Stem.density = tree.traits$Stem.mass/tree.traits$Stem.volume
# calculate SLA
tree.traits$SLA = tree.traits$Leaf.area / tree.traits$Dry.mass
# calculate C:N ratio
tree.traits$c.n = tree.traits$X.C / tree.traits$X.N
# clean up data and subset it based on species
#traits <- select(tree.traits, Site, Species, SLA, Stem.density,
#Height, DBH, X.N, X.C, Stomatal.Length, Stomatal.Density)
### TO DO I'm getting an error on this for some reason -- formatted correctly?
## Problem is that DBH is always 0.5 for these small ones. So here I add a small amount of random noise to the 0.5 dbh individuals
zerofives <- tree.traits$DBH == 0.5 & !is.na(tree.traits$DBH)
tree.traits$DBH[zerofives] = 0.5 + runif(length(tree.traits$DBH[zerofives]), max = 0.01)
# same for exactly 1 cm
ones <- tree.traits$DBH == 1 & !is.na(tree.traits$DBH)
tree.traits$DBH[ones] = 1 + runif(length(tree.traits$DBH[ones]), max = 0.01)
ex <- subset(tree.traits, Site == "GR" & Species == "KALANG")
ex <- subset(tree.traits, Site == "GR" & Species == "MYRGAL")
# choose traits
tr <- c("SLA", "Stem.density", "DBH", "c.n")
# getting error with DBH (causing loop to stop) so trying it w/o DBH
#tr.2 <- c("SLA", "Stem.density", "c.n")
# Find complete cases for this set
ex <- ex[complete.cases(ex[,tr]),]
vol = convhulln(ex[,tr], "FA")$vol
# select only species of interest because KALANG and MYRGAL are being problematic
#speciestokeep <- as.factor(c("ACEPEN", "BETPAP", "CORALT", "FAGGRA", "SORAME"))
#tree.traits.interest <- tree.traits[which(tree.traits$Species %in% speciestokeep),]
#tr.species <- c("Site", "Species", "SLA", "Stem.density", "c.n")
#tree.traits.tr <- tree.traits.interest[,tr.species]
#coralt <- subset(tree.traits.tr, Site == "hf" & Species == "CORALT")
#vol = convhulln(coralt[,tr.2], "FA")$vol
# now apply this across all species and sites
# TO DO still getting error with species of interest with CORALT -- DBHs all 1 causing this
chvols = vector()
for(site in unique(tree.traits$Site)){
for(sp in unique(tree.traits$Species)){
ex <- subset(tree.traits, Site == site & Species == sp)
# Find complete cases for this set
ex <- ex[complete.cases(ex[tr]),]
if(nrow(ex) <= length(tr)) vol = NA
else  vol = convhulln(ex[,tr], "FA")$vol
chvols = rbind(chvols, data.frame(site, sp, vol, n = nrow(ex)))
}
}
save(chvols, file = "Species Level CHV.csv", row.names=F)
# Now community level
sp.tr <- c("SLA", "Stem.density", "DBH", "c.n")
sp.tr <- tree.traits[,sp.tr]
sp.tr
trait.means <- aggregate(sp.tr, list(Species = tree.traits$Species, Site = tree.traits$Site), FUN = mean, na.rm=TRUE)
trait.means[is.nan(trait.means$SLA), ]$SLA <- NA
trait.means[is.nan(trait.means$DBH), ]$DBH <- NA
trait.means[is.nan(trait.means$Stem.density), ]$Stem.density <- NA
trait.means[is.nan(trait.means$c.n), ]$c.n <- NA
chvols.comm = vector()
for(site in unique(trait.means$Site)){
for(sp in unique(trait.means$Species)){
ex <- subset(trait.means, Site == site & Species == sp)
# Find complete cases for this set
ex <- trait.means[complete.cases(trait.means),]
chvols.comm = rbind(chvols.comm, data.frame(site, sp, vol, n = nrow(ex)))
}
}
ex <- trait.means[complete.cases(trait.means),]
d <- read.csv("all.species.dbh.csv", row.names = NULL)
d <- d[,1:3]
#d <- d2[,-2]
overstory <- distinct(d)
overstory <- rename(overstory, Species = Comp.Species)
rm(list = ls())
options(stringsAsFactors = FALSE)
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/senior-moment/data")
library(geometry)
library(FD)
library(plyr)
library(dplyr)
library(reshape2)
library(stringr)
tree.traits <- read.csv("tree-traits.csv")
tree.traits <- tree.traits[,-13:-17]
tree.traits <- tree.traits[,-14:-21]
tree.traits$Stem.density = tree.traits$Stem.mass/tree.traits$Stem.volume
tree.traits$SLA = tree.traits$Leaf.area / tree.traits$Dry.mass
tree.traits$c.n = tree.traits$X.C / tree.traits$X.N
zerofives <- tree.traits$DBH == 0.5 & !is.na(tree.traits$DBH)
tree.traits$DBH[zerofives] = 0.5 + runif(length(tree.traits$DBH[zerofives]), max = 0.01)
ones <- tree.traits$DBH == 1 & !is.na(tree.traits$DBH)
tree.traits$DBH[ones] = 1 + runif(length(tree.traits$DBH[ones]), max = 0.01)
ex <- subset(tree.traits, Site == "GR" & Species == "KALANG")
ex <- subset(tree.traits, Site == "GR" & Species == "MYRGAL")
tr <- c("SLA", "Stem.density", "DBH", "c.n")
ex <- ex[complete.cases(ex[,tr]),]
vol = convhulln(ex[,tr], "FA")$vol
chvols = vector()
for(site in unique(tree.traits$Site)){
for(sp in unique(tree.traits$Species)){
ex <- subset(tree.traits, Site == site & Species == sp)
# Find complete cases for this set
ex <- ex[complete.cases(ex[tr]),]
if(nrow(ex) <= length(tr)) vol = NA
else  vol = convhulln(ex[,tr], "FA")$vol
chvols = rbind(chvols, data.frame(site, sp, vol, n = nrow(ex)))
}
}
View(chvols)
library(vegan)
library(dplyr)
library(tidyr)
library(reshape)
library(plyr)
library(reshape2)
library(ggplot2)
rm(list = ls())
setwd("~/GitHub/senior-moment/data")
rm(list = ls())
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/senior-moment/data")
load("NMDS Output.RData")
d <- read.csv("all.species.dbh.csv", row.names = NULL)
d <- d[,1:3]
overstory <- distinct(d)
head(overstory)
names(overstory)
d <- melt(overstory, id = "Individual", measure.vars = "Comp.Species" )
over.all <- as.data.frame(acast(d, Individual ~ value, length))
head(over.all)
over.all <- t(over.all)
head(over.all)
richness <- apply(over.all, 2, sum)
overcomp <- data.frame(mds1$points)
overcomp$s <- richness # add our species richness calculations to this data frame
overcomp$sp <- substr(rownames(overcomp), 1, 6)
overcomp$site <- unlist(
lapply(strsplit(rownames(overcomp), "_"),
function(x) x[[2]]))
overcomp$site <- as.factor(overcomp$site)
levels(overcomp$site) <- c(3, 1, 4, 2)
overcomp$site <- factor(as.numeric(as.character(overcomp$site)), labels = c("HF", "WM", "GR", "SH"))
colz = alpha(c("#E7298A", "#1B9E77", "#D95F02", "#7570B3"), 0.5)
plot(mds1, type = "n",
xlim = c(-2, 2),
ylim = c(-1.2, 2))
count = 1
for(i in unique(overcomp$site)){
ordihull(mds1, group = overcomp$site, label = F,
draw = "polygon", col = colz[count],
show.groups = i)
count = count + 1
}
legend("topleft",
fill = colz,
legend = c("Harvard Forest", "White Mountains", "Grant", "St. Hippolyte"),
bty = "n")
title("Overstory")
d2 <- read.csv("understory.csv")
rownames(d2) = d2[,1] # move species names into rows
d2 <- d2[,-1]
head(d2)
richness <- apply(d2, 2, sum)
undercomp <- data.frame(mds2$points)
undercomp$s <- richness # add our species richness calculations to this data frame
undercomp$sp <- substr(rownames(undercomp), 1, 6)
undercomp$site <- unlist(
lapply(strsplit(rownames(undercomp), "_"),
function(x) x[[2]]))
undercomp$site <- as.factor(undercomp$site)
levels(undercomp$site) <- c(3, 1, 4, 2)
undercomp$site <- factor(as.numeric(as.character(undercomp$site)), labels = c("HF", "WM", "GR", "SH"))
colz = alpha(c("#E7298A", "#1B9E77", "#D95F02", "#7570B3"), 0.5)
plot(mds2, type = "n",
xlim = c(-1.5, 1.5),
ylim = c(-1.2, 2)
)
count = 1
for(i in unique(undercomp$site)){
ordihull(mds2, group = undercomp$site, label =F,
draw = "polygon", col = colz[count],
show.groups = i)
count = count + 1
}
unique(overstory)
richness <- apply(over.all, 2, sum)
knitr::opts_chunk$set(echo = TRUE)
source("Fig1-MDS.R")
\bigskip
rm(list = ls())
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/senior-moment/data")
library(vegan) # install.packages("vegan")
library(lme4)# install.packages("lme4")
library(scales)# install.packages("scales")
library(ggplot2) # install.packages("ggplot2")
library(plyr)
library(reshape)
library(sjPlot)
install.packages(c("BH", "chron", "coda", "colorspace", "covr", "curl", "data.table", "digest", "e1071", "fastmatch", "ggfortify", "Hmisc", "hms", "htmlTable", "hunspell", "jsonlite", "knitr", "maptools", "Matrix", "mgcv", "miscTools", "nlme", "nycflights13", "openssl", "psych", "Rcpp", "rgdal", "rms", "RSQLite", "sp", "SparseM", "spdep", "tables", "TH.data", "tidyr", "vegan", "XML", "yaml", "zoo"))
R.version
install.packages('devtools') #assuming it is not already installed
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
updateR(admin_password = 'Admin user password')
R.version
