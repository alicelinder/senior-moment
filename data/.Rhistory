x = 8 + 3
y = log (2)
z = ((121/3) * (6^3))/(pi)
x + y
z = x * y
z
##  coding for the mammogram problem
##  begin with one set of women
##  set parameters and initialize
#last 4 number of Harvard ID to get reproducible results
prob.false.positive = 0.05
num.women = 50
#last 4 number of Harvard ID to get reproducible results
set.seed(2401)
## initialize population
## default for function vector() sets values to 0
## This call to vector() creates a numeric vector
##    of length num.women, with all values = 0
test.result = vector("numeric", num.women)
prob=c(1 - prob.false.positive, prob.false.positive),
test.result = vector("numeric", num.women)
## now sample from test results
##    using function sample()
## Type help(sample) for a complete explanation of
##    the function
##  0 = neg result, 1 = post result
test.result = sample(c(0,1), size = num.women,
prob=c(1 - prob.false.positive, prob.false.positive),
replace = TRUE) #don't want a 0 for the first one
View(as.matrix(test.result))
prob.false.positive = 0.05
num.women = 50
num.replicates = 5000
set.seed(2401)
## initialize for replicates
at.least.one.pos = vector("numeric", num.replicates)
## Nest earlier simulation in a `for' loop which
##    repeats the 50 mammograms num.replicates times
##  Record in each for() loop whether or not at least one
##    test was positive
for(ii in 1:num.replicates){
test.result = vector("numeric", num.women)
test.result = sample(c(0,1), size = num.women,
prob=c(1 - prob.false.positive, prob.false.positive),
replace = TRUE)
num.pos.tests = sum(test.result)
## at least one positive test?
at.least.one.pos[ii] = (num.pos.tests > 0)
}
## Now calculate the proportion of replicates that produced
##   at least one positive test
sum(at.least.one.pos)/num.replicates
#calculate 95% confidence interval
x = 3150
s = 250
n = 50
error = (qt(.975,df=n-1)*s/sqrt(n))
x - error
x + error
mu = 230
alpha = .05
n = 24
t = (175-230)/((35)/sqrt(24))
p=2*pt(t, (n-1))
t
p
mu = 230
alpha = .05
n = 24
x = 175
sd = 35
t = (x-mu)/((sd)/sqrt(n))
p=2*pt(t, (n-1))
t
p
error = (qt(.975,df=n-1)*s/sqrt(n))
error
x + error
x - error
s = 35
error = (qt(.975,df=n-1)*s/sqrt(n))
x + error
x - error
BRFSS <- read.table("~/Downloads/BRFSS.Rdata", quote="\"")
View(BRFSS)
load("~/Downloads/BRFSS.Rdata")
brfss.full.rows = 1:nrow(BRFSS)
set.seed(4220)
#randomly smaple 1000 integers out of the total number of rows
brfss.sample.rows = sample(brfss.full.rows, size=1000, replace = FALSE)
View(BRFSS)
mean(brfss.sample.rows$bmi)
mean = mean(brfss.sample.rows$bmi)
load(BRFSS.Rdata)
mean = mean(BRFSS$bmi[brfss.sample.rows])
mean
pop.mean = mean(BRFSS$bmi)
pop.mean
repetitions = 10000
sample.means = rep(NA, repetitions)
for(ii in 1:repetitions){
brfss.resample = sample(BRFSS$bmi, size = 1000, replace = FALSE)
sample.means[ii] = mean(brfss.resample)
}
hist(sample.means)
abline(v=mean(brfss.sample$bmi), col="Red")
brfss.sample = BRFSS[brfss.sample.rows,]
abline(v=mean(brfss.sample$bmi), col="Red")
mean(sample.means)
sd(sample.means)
brfss.full.rows = 1:nrow(BRFSS)
#randomly smaple 1000 integers out of the total number of rows
brfss.sample.rows = sample(brfss.full.rows, size=100, replace = FALSE)
brfss.sample = BRFSS[brfss.sample.rows,]
View(BRFSS[brfss.sample.rows]$bmi)
View(BRFSS$bmi[brfss.sample.rows])
brfss.full.rows = 1:nrow(BRFSS)
#randomly smaple 1000 integers out of the total number of rows
brfss.sample.rows = sample(brfss.full.rows, size=10, replace = FALSE)
brfss.sample = BRFSS[brfss.sample.rows,]
View(BRFSS$bmi[brfss.sample.rows])
mean(BRFSS$bmi[brfss.sample.rows])
sd(BRFSS$bmi[brfss.sample.rows])
x = 3150
s = 250
n = 50
error = (qt(.975,df=n-1)*s/sqrt(n))
x - error
x + error
x = 3150
mu = 3250
s = 250
n = 50
t = (x-mu)/((s)/sqrt(n))
t
p = 2*pt(t, (n-1))
p
error = (21.015-18.985)/2
x = 18.985 + error
x
t* = 35
t = 35
error = (21.015-18.985)/2
x = 18.985 + error
t = 35
n = 36
s = error * sqrt(n) / t
s
error = (21.015-18.985)/2
x = 18.985 + error
t = qt(0.975, df = 35)
n = 36
s = error * sqrt(n) / t
s
x = 137.5
mu = 127
s = 39
n = 64
t = (x-mu)/((s)/sqrt(n))
t
p = 2*pt(t, (n-1))
p
p = 2*pt(t, (n-1), left.tail = FALSE)
p = 2*pt(t, (n-1), lower.tail = FALSE)
p
x = 3150
mu = 3250
s = 250
n = 50
t = (x-mu)/((s)/sqrt(n))
t
p = 2*pt(t, (n-1))
p
x = 137.5
mu = 127
s = 39
n = 64
t = (x-mu)/((s)/sqrt(n))
t
```
4.
```{r}
#calculate p-value
p = 2*pt(t, (n-1), lower.tail = FALSE)
p
n = 51
x = 12.5
s = 4.75
mu = 14.44
t = (x-mu)/((s)/sqrt(n))
t
p = 2*pt(t, (n-1), lower.tail = FALSE)
p
p = 2*pt(t, (n-1))
p
n = 51
x = 12.5
s = 4.75
mu = 14.44
t = (x-mu)/((s)/sqrt(n))
# find the p value
p = 2*pt(t, (n-1))
# calculate 95% confidence interval
error = (qt(.975,df=n-1)*s/sqrt(n))
upper.limit = x - error
lower.limit = x + error
error = (qt(.975,df=n-1)*s/sqrt(n))
lower.limit = x - error
upper.limit = x + error
lower.limit
upper.limit
load("~/Downloads/gm.chicks.Rdata")
View(gm.chicks.Rdata)
View("gm.chicks.Rdata")
View(gm.chicks)
1. \[H_{0}: \mu_{transgenic} = \mu_{non-transgenic} = 127\]
load(~/gm.chicks.Rdata)
load(gm.chicks.Rdata)
load("gm.chicks.Rdata"")
load("gm.chicks.Rdata)
load("gm.chicks.Rdata)
load("gm.chicks.Rdata")
load("gm.chicks.Rdata")
setwd("~/Downloads")
load("gm.chicks.Rdata")
x.bar = mean(gm.chicks$tg, na.rm = TRUE)
x.bar
x.sd = sd(gm.chicks$tg, na.rm = TRUE)
x.sd
num.missing = sum(is.na(gm.chicks$tg))
num.missing
num.cases = nrow(gm.chicks$tg)
num.cases
num.cases = nrow(gm.chicks)
num.cases
sample.size = num.cases - num.missing
sample.size
null.non.tg.mean = mean(gm.chicks$non.tg)
t.stat = (x.bar - null.pop.mean)/(x.sd/sqrt(sample.size))
t.stat
t.stat = (x.bar - null.non.tg.mean)/(x.sd/sqrt(sample.size))
t.stat
p = 2*pt(t.stat, (n-1))
p
p = 2*pt(t.stat, (n-1), lower.tail = FALSE)
p
setwd("~/Downloads")
load("~/Downloads/gm.chicks.Rdata")
p = 2*pt(t.stat, (sample.size-1), lower.tail = FALSE)
p
p = 2*pt(t.stat, (sample.size-1))
p
rm(list = ls())
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/senior-moment/data")
source("Fig2-source.R")
focal.centroid <- focal.centroid[-which(focal.centroid$sp == "FAGGRA" & focal.centroid$sum.BA > 20000),]
focal.centroid <- focal.centroid[-which(focal.centroid$sp == "QUEALB"),]
lme1 <- lmer(relative.BA ~ minLatdiff + (minLatdiff | sp), data = focal.centroid)
?lmer
??lmer
library(lme4)
library(sjPlot)
lme1 <- lmer(relative.BA ~ minLatdiff + (minLatdiff | sp), data = focal.centroid)
fixef(lme1)
ranef(lme1)
summary(lme1)
ranef <- ranef(lme1)
sjt.lmer(lme1)
rm(list = ls())
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/senior-moment/data")
load("Clim.Focal.RData")
lme1 <- lmer(relative.BA ~ distance.to.climatic.centroid + (distance.to.climatic.centroid | sp), data = clim.focal)
fixef(lme1)
ranef(lme1)
summary(lme1)
ranef <- ranef(lme1)
sjt.lmer(lme1)
load("CHVols.RData")
chvols.focal <- chvols.focal[-which(chvols.focal$sp == "HAMVIR"),]
chvols.focal <- chvols.focal[-which(chvols.focal$sp == "SORAME"),]
summary(lm(chvols.focal$relative.vol ~ chvols.focal$lat))
lm(chvols.focal$relative.vol ~ chvols.focal$lat)
summary(lm(chvols.focal$lat ~ chvols.focal$relative.vol))
aov(chvols.focal$lat ~ chvols.focal$relative.vol)
summary(aov(chvols.focal$lat ~ chvols.focal$relative.vol))
summary(lm(chvols.focal[chvols.focal$sp == "ACEPEN",]$lat ~ chvols.focal[chvols.focal$sp == "ACEPEN",]$relative.vol))
acepen <- chvols.focal[chvols.focal$sp == "ACEPEN",]$relative.vol
summary(lm(chvols.focal[chvols.focal$sp == "ACEPEN",]$lat ~ acepen))
betpap <- chvols.focal[chvols.focal$sp == "BETPAP",]$relative.vol
summary(lm(chvols.focal[chvols.focal$sp == "BETPAP",]$lat ~ betpap))
coralt <- chvols.focal[chvols.focal$sp == "CORALT",]$relative.vol
summary(lm(chvols.focal[chvols.focal$sp == "CORALT",]$lat ~ coralt))
faggra <- chvols.focal[chvols.focal$sp == "FAGGRA",]$relative.vol
summary(lm(chvols.focal[chvols.focal$sp == "FAGGRA",]$lat ~ faggra))
plot(lm(chvols.focal[chvols.focal$sp == "FAGGRA",]$lat ~ faggra))
plot(chvols.focal[chvols.focal$sp == "FAGGRA",]$lat, faggra)
plot(chvols.focal[chvols.focal$sp == "CORALT",]$lat, coralt)
plot(chvols.focal[chvols.focal$sp == "BETPAP",]$lat, betpap)
plot(chvols.focal[chvols.focal$sp == "ACEPEN",]$lat, acepen)
summary(lm(chvols.focal[chvols.focal$sp == "FAGGRA",]$lat ~ faggra))
View(chvols.focal)
rm(list = ls())
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/senior-moment/data")
source("Fig2-source.R")
library(geometry) # install.packages("vegan")
library(FD) # install.packages("FD")
library(plyr) # install.packages("plyr")
library(dplyr) # install.packages("dplyr")
library(reshape2) # install.packages("reshape2")
library(stringr) # install.packages("stringr")
library(ggplot2)
tree.traits <- read.csv("tree-traits.csv")
tree.traits <- tree.traits[,-13:-17]
tree.traits <- tree.traits[,-14:-21]
tree.traits$Stem.density = tree.traits$Stem.mass/tree.traits$Stem.volume
tree.traits$SLA = tree.traits$Leaf.area / tree.traits$Dry.mass
tree.traits$c.n = tree.traits$X.C / tree.traits$X.N
tree.traits.focal <- filter(tree.traits, Species == "ACEPEN" | Species == "BETPAP" | Species == "CORALT" | Species == "FAGGRA" | Species == "HAMVIR" | Species == "SORAME")
tree.traits.focal
tree.traits <-  tree.traits[-which(tree.traits$Individual == "BETPAP04_GR"),]
save(tree.traits.focal, file = "Species-Traits.RData")
tree.traits <- tree.traits[-which(tree.traits$Individual == "FAGGRA10_HF"),]
zerofives <- tree.traits$DBH == 0.5 & !is.na(tree.traits$DBH)
tree.traits$DBH[zerofives] = 0.5 + runif(length(tree.traits$DBH[zerofives]), max = 0.01)
ones <- tree.traits$DBH == 1 & !is.na(tree.traits$DBH)
tree.traits$DBH[ones] = 1 + runif(length(tree.traits$DBH[ones]), max = 0.01)
tr <- c("SLA", "Stem.density", "DBH", "c.n")
chvols = vector()
for(site in unique(tree.traits$Site)){
for(sp in unique(tree.traits$Species)){
ex <- subset(tree.traits, Site == site & Species == sp)
# Find complete cases for this set
ex <- ex[complete.cases(ex[tr]),]
if(nrow(ex) <= length(tr)) vol = NA
else  vol = convhulln(ex[,tr], "FA")$vol
chvols = rbind(chvols, data.frame(site, sp, vol, n = nrow(ex)))
}
}
chvols.focal <- filter(chvols, sp == "ACEPEN" | sp == "BETPAP" | sp == "CORALT" | sp == "FAGGRA" | sp == "HAMVIR" | sp == "SORAME")
chvols.focal
rm(list = ls())
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/senior-moment/data")
load("Clim.Focal.RData")
View(clim.focal)
clim.focal <- clim.focal[-which(clim.focal$sp == "CORALT"),]
clim.focal <- clim.focal[-which(clim.focal$sp == "HAMVIR"),]
clim.focal <- clim.focal[-which(clim.focal$sp == "SORAME"),]
clim.focal <- clim.focal[-which(clim.focal$sp == "CORALT"),]
load("Clim.Focal.RData")
clim.focal <- clim.focal[-which(clim.focal$sp == "HAMVIR"),]
clim.focal <- clim.focal[-which(clim.focal$sp == "SORAME"),]
clim.focal <- clim.focal[-which(clim.focal$sp == "CORALT"),]
summary(lm(clim.focal$distance.to.climatic.centroid ~ clim.focal$relative.vol))
View(clim.focal)
load("CHVol.Clim.RData")
View(clim.focal)
clim.focal <- clim.focal[-which(clim.focal$sp == "CORALT"),]
summary(lm(clim.focal$distance.to.climatic.centroid ~ clim.focal$relative.vol))
acepen <- clim.focal[clim.focal$sp == "ACEPEN",]$relative.vol
betpap <- clim.focal[clim.focal$sp == "BETPAP",]$relative.vol
coralt <- clim.focal[clim.focal$sp == "CORALT",]$relative.vol
faggra <- clim.focal[clim.focal$sp == "FAGGRA",]$relative.vol
summary(lm(clim.foca[clim.focal$sp == "ACEPEN",]l$distance.to.climatic.centroid ~ acepen))
summary(lm(clim.foca[clim.focal$sp == "ACEPEN",]$distance.to.climatic.centroid ~ acepen))
summary(lm(clim.focal[clim.focal$sp == "ACEPEN",]$distance.to.climatic.centroid ~ acepen))
summary(lm(clim.focal[clim.focal$sp == "BETPAP",]$distance.to.climatic.centroid ~ betpap))
summary(lm(clim.focal[clim.focal$sp == "FAGGRA",]$distance.to.climatic.centroid ~ faggra))
