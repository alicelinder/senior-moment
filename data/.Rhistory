REUdata[10,"clean.Pirates.Ninjas"] <- "p"
REUdata[10, ]
REUdata[11,"clean.Pirates.Ninjas"] <- "p"
REUdata[19,"clean.Pirates.Ninjas"] <- "p"
REUdata[19,"clean.Pirates.Ninjas"] <- "p"
REUdata[22,"clean.Pirates.Ninjas"] <- "p"
REUdata[16,"clean.Pirates.Ninjas"] <- "n"
REUdata$clean.Pirates.Ninjas == "p"
table(REUdata$clean.Pirates.Ninjas)
plot(lm(REUdata$I.have.used.R ~ REUdata$Programming.Experience))
plot(REUdata$I.have.used.R ~ REUdata$Programming.Experience)
t.test(REUdata$I.have.used.R ~ REUdata$Programming.Experience)
t.test(REUdata$Programming.Experience ~ REUdata$I.have.used.R)
plot(REUdata$Programming.Experience ~ REUdata$I.have.used.R)
REUdata[!(REUdata[,"Pirates.or.Ninjas"] == "Pirates" |
REUdata[,"Pirates.or.Ninjas"] == "Ninjas"),"Pirates.or.Ninjas"] <- NA
## Visualize patterns
REUdata[,REUdata$Pirates.or.Ninjas] !== "Pirates" | REUdata[,REUdata$Pirates.or.Ninjas] !== "Ninjas"<- NA
REUdata[,REUdata$Pirates.or.Ninjas] != "Pirates" | REUdata[,REUdata$Pirates.or.Ninjas] != "Ninjas"<- NA
REUdata(![REUdata$Pirates.or.Ninjas] == "Pirates" | REUdata[,REUdata$Pirates.or.Ninjas] == "Ninjas"), REUdata$Pirates.or.Ninjas]<- NA
REUdata(![REUdata$Pirates.or.Ninjas == "Pirates" | REUdata[,REUdata$Pirates.or.Ninjas] == "Ninjas"), REUdata$Pirates.or.Ninjas]<- NA
REUdata(![REUdata$Pirates.or.Ninjas == "Pirates" | REUdata$Pirates.or.Ninjas == "Ninjas"), REUdata$Pirates.or.Ninjas]<- NA
REUdata!([REUdata$Pirates.or.Ninjas == "Pirates" | REUdata$Pirates.or.Ninjas == "Ninjas"), REUdata$Pirates.or.Ninjas]<- NA
REUdata!([REUdata$Pirates.or.Ninjas == "Pirates" | REUdata$Pirates.or.Ninjas == "Ninjas"), "Pirates.or.Ninjas"]<- NA
REUdata[!(REUdata$Pirates.or.Ninjas == "Pirates" | REUdata$Pirates.or.Ninjas == "Ninjas"), "Pirates.or.Ninjas"]<- NA
REUdata[!(REUdata[,"Pirates.or.Ninjas"] == "Pirates" | REUdata[,"Pirates.or.Ninjas"] == "Ninjas"), "Pirates.or.Ninjas"]<- NA
REUdata[!(REUdata[,"Pirates.or.Ninjas"] == "Pirates" | REUdata[,"Pirates.or.Ninjas"] == "Ninjas"),"Pirates.or.Ninjas"]<- NA
REUdata[!(REUdata[,"Pirates.or.Ninjas"] == "Pirates" | REUdata[,"Pirates.or.Ninjas"] == "Ninjas"),"Pirates.or.Ninjas"] <- NA
library(gdata)
d <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.xlsx")
install.packages("gdata")
library(gdata)
library(gdata)
install.packages("gdata")
d <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.xlsx")
install.packages("gdata")
d <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.xlsx")
library(gdata)
d <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.xlsx")
splist <- read.xls("~/Dropbox/Work/Harvard/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_arbres.xlsx")
splist <- read.xls("~/Dropbox/Work/Harvard/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_arbres.xlsx")
head(d)
names(d) <- c('no','Transect','sp','DBH','age')
names(splist) <- c('sp','Latin')
install.packages("spaa")
library(spaa)
splist <- read.xls("~/Dropbox/Work/Harvard/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_arbres.xlsx")
splist <- read.xls("~/Dropbox/Work/Harvard/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_arbres.xlsx")
head(d)
names(d) <- c('no','Transect','sp','DBH','age')
names(splist) <- c('sp','Latin')
d <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.csv")
install.packages("gdata")
install.packages("gdata")
library(gdata)
d <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.csv")
d <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.csv")
splist <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_arbres.csv")
head(d)
names(d) <- c('no','Transect','sp','DBH','age')
names(splist) <- c('sp','Latin')
library(ggplot2)
plot(age ~ DBH, data = d)
ggplot(d, aes(DBH, age, color = sp)) + geom_point()
(treesp <- sort(table(d$sp), decreasing=T))
(commonsp <- names(sort(table(d$sp), decreasing=T))[1:10])
treesp <- as.data.frame(treesp)
treesp$sp <- rownames(treesp)
treesp <- merge(splist, treesp)
treesp[order(treesp$treesp, decreasing=T),][1:10,]
d <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Herbacées.csv")
splist <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_herb.csv")
splist <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_herb.csv")
head(d)
names(d) <- c('no','Transect','sp','DBH','age')
names(splist) <- c('sp','Latin')
names(d) <- c('Transect','Code','recouv','herb')
names(splist) <- c('sp','Latin')
library(ggplot2)
(understorysp <- sort(table(d$sp), decreasing=T))
(commonundersp <- names(sort(table(d$sp), decreasing=T))[1:10])
d <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Herbacées.csv")
splist <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_herb.csv")
head(d)
names(d) <- c('Transect','Code','recouv','herb')
names(splist) <- c('sp','Latin')
library(ggplot2)
plot(age ~ DBH, data = d)
(understorysp <- sort(table(d$sp), decreasing=T))
(understorysp <- sort(table(d$Code), decreasing=T))
(commonundersp <- names(sort(table(d$Code), decreasing=T))[1:10])
(commonundersp <- names(sort(table(d$Code), decreasing=T))[1:15])
understorysp <- as.data.frame(understorysp)
understorysp$Code <- rownames(understorysp)
understorysp <- merge(splist, understorysp)
View(understorysp)
View(understorysp)
(understorysp <- sort(table(d$Code), decreasing=T))
(commonundersp <- names(sort(table(d$Code), decreasing=T))[1:15])
understorysp <- as.data.frame(understorysp)
understorysp$Code <- rownames(understorysp)
splist <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_herb.csv")
understorysp <- merge(splist, understorysp)
understorysp[order(understorysp$understorysp, decreasing=T),][1:10,]
understorysp[order(understorysp$understorysp, decreasing=T),][1:15,]
understorysp[order(understorysp$understorysp, decreasing=T),][1:20,]
View(treesp)
d <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.csv")
splist <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_arbres.csv")
head(d)
names(d) <- c('no','Transect','sp','DBH','age')
names(splist) <- c('sp','Latin')
library(ggplot2)
(treesp <- sort(table(d$sp), decreasing=T))
# Top 10 most common species
(commonsp <- names(sort(table(d$sp), decreasing=T))[1:10])
#
treesp <- as.data.frame(treesp)
treesp$sp <- rownames(treesp)
treesp <- merge(splist, treesp)
treesp[order(treesp$treesp, decreasing=T),][1:10,]
treesp[order(treesp$treesp, decreasing=T),][1:20,]
d <- read.csv("~/Dropbox/Summer 2016 Forest/Scripts/Sorame.csv")
head(d)
d <- d[!is.na(d$Latitude),]
library(maptools)
ds <- SpatialPointsDataFrame(d[,c("Longitude","Latitude")], d)
kmlPoints(ds, kmlfile = "SHind.kml", description = ds$Individual, name = ds$Individual)
write(dsk$content, file="WM.kml")
dsk <- kmlPoints(ds, kmlfile = "SHind.kml", description = ds$Individual, name = ds$Individual)
write(dsk$content, file="WM.kml")
rm(list=ls()) # remove everything currently held in the R memory
d <- read.csv("~/Dropbox/Summer 2016 Forest/Scripts/Sorame.csv")
head(d)
d <- d[!is.na(d$Latitude),]
library(maptools)
ds <- SpatialPointsDataFrame(d[,c("Longitude","Latitude")], d)
dsk <- kmlPoints(ds, kmlfile = "SHind.kml", description = ds$Individual, name = ds$Individual)
dsk <- kmlPoints(ds, kmlfile = "Sorame.kml", description = ds$Individual, name = ds$Individual)
write(dsk$content, file=".kml")
write(dsk$content, file="sorame.kml")
help("write")
kmlPoints(ds, kmlfile = "Sorame.kml", description = ds$Individual, name = ds$Individual)
write(ds$content, file="Sorame.kml")
sample(2:16, 2)
sample(2:16, 2, replace = FALSE)
rm(list = ls())
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/senior-moment/data")
library(vegan) # install.packages("vegan")
library(lme4)# install.packages("lme4")
library(scales)# install.packages("scales")
library(ggplot2) # install.packages("ggplot2")
library(plyr)
library(reshape)
ggplot(focal,
aes(Lat, intra.comp.BA, color = sp)) +
geom_point() +
geom_smooth(method="lm", se=F) +
facet_wrap(~sp, ncol = 4)
source("Fig2-source.R")
clim <- read.csv("climatic_data.csv")
View(clim)
clim.focal <- merge(focal, clim, by = "Individual")
View(clim)
head(clim)
clim <- subset(clim, select = c("Individual", "distance.to.climatic.centroid"))
clim.focal <- merge(focal, clim, by = "Individual")
clim
ggplot(clim.focal,
aes(distance.to.climatic.centroid, intra.comp.BA, color = sp)) +
geom_point() +
geom_smooth(method="lm", se=F) +
facet_wrap(~sp, ncol = 4)
head(clim.focal)
View(focal)
rm(list = ls())
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/senior-moment/data")
library(vegan) # install.packages("vegan")
library(lme4)# install.packages("lme4")
library(scales)# install.packages("scales")
library(ggplot2) # install.packages("ggplot2")
library(plyr)
library(reshape)
source("Fig2-source.R")
clim <- read.csv("climatic_data.csv")
clim <- subset(clim, select = c("Individual", "distance.to.climatic.centroid"))
focal.centroid <- focal.centroid[-which(focal.centroid$sp == "FAGGRA" & focal.centroid$sum.BA > 20000),]
focal.centroid <- focal.centroid[-which(focal.centroid$sp == "QUEALB"),]
clim.focal <- merge(focal.centroid, clim, by = "Individual")
ggplot(clim.centroid,
aes(distance.to.climatic.centroid, relative.BA, color = sp)) +
geom_point() +
geom_smooth(method="lm", se=F) +
facet_wrap(~sp, ncol = 3, scales = "free") +
xlab("Distance from Min. Latitude") +
ylab("Relative Basal Area")
ggplot(clim.focal,
aes(distance.to.climatic.centroid, relative.BA, color = sp)) +
geom_point() +
geom_smooth(method="lm", se=F) +
facet_wrap(~sp, ncol = 3, scales = "free") +
xlab("Distance from Min. Latitude") +
ylab("Relative Basal Area")
head(clim.focal)
summary(lm1 <- lm(relative.BA ~ distance.to.climatic.centroid, data = focal[focal$sp == "ACEPEN",]))
summary(lm1 <- lm(relative.BA ~ distance.to.climatic.centroid, data = clim.focal[clim.focal$sp == "ACEPEN",]))
summary(lm1 <- lm(relative.BA ~ distance.to.climatic.centroid, data = clim.focal[clim.focal$sp == "BETPAP",]))
summary(lm1 <- lm(relative.BA ~ distance.to.climatic.centroid, data = clim.focal[clim.focal$sp == "CORALT",]))
summary(lm1 <- lm(relative.BA ~ distance.to.climatic.centroid, data = clim.focal[clim.focal$sp == "FAGGRA",]))
summary(lm1 <- lm(relative.BA ~ distance.to.climatic.centroid, data = clim.focal[clim.focal$sp == "HAMVIR",]))
summary(lm1 <- lm(relative.BA ~ distance.to.climatic.centroid, data = clim.focal[clim.focal$sp == "SORAME",]))
lme1 <- lmer(competing.BA ~ distance.to.climatic.centroid + (distance.to.climatic.centroid | sp), data = clim.focal)
lme1 <- lmer(relative.BA ~ distance.to.climatic.centroid + (distance.to.climatic.centroid | sp), data = clim.focal)
fixef(lme1)
ranef(lme1)
summary(lme1)
ggplot(clim.focal,
aes(distance.to.climatic.centroid, relative.BA, color = sp)) +
geom_point() +
geom_smooth(method="lm", se=F) +
facet_wrap(~sp, ncol = 3, scales = "free") +
xlab("Distance from Climatic Centroid") +
ylab("Relative Basal Area")
rm(list = ls())
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/senior-moment/data")
# setwd("~/Documents/git/senior-moment/data") # For Dan
# set libraries
library(vegan) # install.packages("vegan")
library(lme4)# install.packages("lme4")
library(scales)# install.packages("scales")
library(ggplot2) # install.packages("ggplot2")
library(plyr)
library(reshape)
#library(sjPlot) # install.packages("sjPlot")
# detach("package:dplyr", unload=TRUE)
# load all data from source code
#source("Fig2-source.R")
# plot intraspecific competition
ggplot(focal,
aes(Lat, intra.comp.BA, color = sp)) +
geom_point() +
geom_smooth(method="lm", se=F) +
facet_wrap(~sp, ncol = 4)
# model intraspecific competition
summary(lm1 <- lm(intra.comp.BA ~ Lat, data = focal[focal$sp == "ACEPEN",]))
summary(lm2 <- lm(intra.comp.BA ~ Lat, data = focal[focal$sp == "BETPAP",]))
lme1 <- lmer(intra.comp.BA ~ Lat + (Lat | sp), data = focal)
# graph based on latitude
ggplot(focal,
aes(Lat, competing.BA, color = sp)) +
geom_point() +
geom_smooth(method="lm", se=F) +
facet_wrap(~sp, ncol = 4)
ggplot(focal,
aes(Lat, log.cBA, color = sp)) +
geom_point() +
geom_smooth(method="lm", se=F) +
facet_wrap(~sp, ncol = 4)
# Why excluding this individual Too large?
ggplot(focal[-42,],
aes(Site, Height, color = sp)) +
geom_smooth( se = F, aes(color = sp)) +
geom_point()  + xlab("Site") +
scale_x_continuous(labels =
c("HF","WM","GR","SH")) +
facet_wrap(~sp, ncol = 4) +
ylab("Height (m)") +
ggtitle("Shifts in Performance")
# grah shows numbers (possibly due to infinite log values?)
# not sure what you are expecting, this looks correct now
ggplot(focal.small,
aes(Site, log.cBA, color = sp)) +
#geom_smooth( se = F, aes(color = sp)) +
geom_point()  + xlab("Site") +
facet_wrap(~sp, ncol = 2) +
ylab("Fraction of total Basal Area")
# no points appear on this graph
# Site was not a factor previously, so as.numeric just makes a vector of NA -- can turn into a factor and then numeric, but not sure why you want this!
ggplot(focal,
aes(as.numeric(as.factor(Site)), as.numeric(competing.BA), color = sp)) +
geom_point() + xlab("Site") +
facet_wrap(~sp, ncol=4)
# Better, just use the factor Site
ggplot(focal,
aes(Site, log.cBA, color = sp)) +
geom_point() + xlab("Site") +
facet_wrap(~sp, ncol=4)
ggplot(focal.small,
aes(Site, log.cBA, color = sp)) +
#geom_smooth( se = F, aes(color = sp)) +
geom_point()  + xlab("Site") +
#scale_x_continuous(labels =
#c("HF","WM","GR","SH")) +
facet_wrap(~sp, ncol = 2) +
ylab("Fraction of total Basal Area")
#ggtitle("Dominance of Small Woody Species")
ggplot(focal.large,
aes(Site, BA.Percentage, color = sp)) +
#geom_smooth( se = F, aes(color = sp)) +
geom_point()  + xlab("Site") +
scale_x_continuous(labels =
c("HF","WM","GR","SH")) +
facet_wrap(~sp, ncol = 2) +
ylab("Fraction of total Basal Area")
#ggtitle("Dominance of Large Woody Species")
# relationship between height and BA.percentage
## do it for 4 different sites for each species
ggplot(focal,
aes(Site, Height, color = sp)) +
geom_point() +
# geom_smooth(method="lm", se=F) +
facet_wrap(~sp, ncol = 4)
which(focal$Height>100)
ggplot(focal[-42,],
aes(as.numeric(Site), Height, color = sp)) +
geom_smooth( se = F, aes(color = sp)) +
geom_point()  + xlab("Site") +
scale_x_continuous(labels =
c("HF","WM","GR","SH")) +
facet_wrap(~sp, ncol = 4) +
ylab("Height (m)") +
ggtitle("Shifts in Performance")
summary(lm1 <- lm(log.cBA ~ Lat, data = focal[focal$sp == "ACEPEN",]))
source("Fig2-source.R")
summary(lm1 <- lm(intra.comp.BA ~ Lat, data = focal[focal$sp == "ACEPEN",]))
head(focal.centroid)
focal.centroid <- focal.centroid[-which(focal.centroid$sp == "FAGGRA" & focal.centroid$sum.BA > 20000),]
focal.centroid <- focal.centroid[-which(focal.centroid$sp == "QUEALB"),]
ggplot(focal.centroid,
aes(minLatdiff, relative.BA, color = sp)) +
geom_point() +
geom_smooth(method="lm", se=F) +
facet_wrap(~sp, ncol = 3, scales = "free") +
xlab("Distance from Min. Latitude") +
ylab("Relative Basal Area")
summary(lm1 <- lm(relative.BA ~ minLatdiff, data = focal[focal$sp == "ACEPEN",]))
summary(lm1 <- lm(relative.BA ~ minLatdiff, data = focal.centroid[focal.centroid$sp == "ACEPEN",]))
summary(lm1 <- lm(relative.BA ~ minLatdiff, data = focal.centroid[focal.centroid$sp == "BETPAP",]))
summary(lm1 <- lm(relative.BA ~ minLatdiff, data = focal.centroid[focal.centroid$sp == "FAGGRA",]))
summary(lm1 <- lm(relative.BA ~ minLatdiff, data = focal.centroid[focal.centroid$sp == "SORAME",]))
summary(lm1 <- lm(relative.BA ~ minLatdiff, data = focal.centroid[focal.centroid$sp == "ACEPEN",]))
summary(lm1 <- lm(relative.BA ~ minLatdiff, data = focal.centroid[focal.centroid$sp == "BETPAP",]))
source('~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/senior-moment/analyses/input/Fig2-BA_vs_Lat.R')
knitr::opts_chunk$set(echo = TRUE)
source("Fig2-source.R")
source('~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/senior-moment/analyses/input/Fig2-BA_vs_Lat.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/senior-moment/analyses/input/Fig2-BA_vs_Lat.R')
summary(lm1 <- lm(relative.BA ~ minLatdiff, data = focal.centroid[focal.centroid$sp == "ACEPEN",]))
summary(lm1 <- lm(relative.BA ~ minLatdiff, data = focal.centroid[focal.centroid$sp == "BETPAP",]))
(lm1 <- lm(relative.BA ~ minLatdiff, data = focal.centroid[focal.centroid$sp == "CORALT",]))
summary(lm1 <- lm(relative.BA ~ minLatdiff, data = focal.centroid[focal.centroid$sp == "CORALT",]))
summary(lm1 <- lm(relative.BA ~ minLatdiff, data = focal.centroid[focal.centroid$sp == "FAGGRA",]))
summary(lm1 <- lm(relative.BA ~ minLatdiff, data = focal.centroid[focal.centroid$sp == "HAMVIR",]))
summary(lm1 <- lm(relative.BA ~ minLatdiff, data = focal.centroid[focal.centroid$sp == "SORAME",]))
rm(list = ls())
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/senior-moment/data")
# setwd("~/Documents/git/senior-moment/data") # For Dan
# set libraries
library(vegan) # install.packages("vegan")
library(lme4)# install.packages("lme4")
library(scales)# install.packages("scales")
library(ggplot2) # install.packages("ggplot2")
library(plyr)
library(reshape)
#library(sjPlot) # install.packages("sjPlot")
# detach("package:dplyr", unload=TRUE)
# load all data from source code
source("Fig2-source.R")
clim <- read.csv("climatic_data.csv")
clim <- subset(clim, select = c("Individual", "distance.to.climatic.centroid"))
# plot intraspecific competition
# ignore extra large DBH for FAGGUS value
focal.centroid <- focal.centroid[-which(focal.centroid$sp == "FAGGRA" & focal.centroid$sum.BA > 20000),]
# ignore QUEALB for graphing purposes
focal.centroid <- focal.centroid[-which(focal.centroid$sp == "QUEALB"),]
clim.focal <- merge(focal.centroid, clim, by = "Individual")
summary(lm1 <- lm(relative.BA ~ distance.to.climatic.centroid, data = clim.focal[clim.focal$sp == "ACEPEN",]))
summary(lm1 <- lm(relative.BA ~ distance.to.climatic.centroid, data = clim.focal[clim.focal$sp == "BETPAP",]))
summary(lm1 <- lm(relative.BA ~ distance.to.climatic.centroid, data = clim.focal[clim.focal$sp == "CORALT",]))
summary(lm1 <- lm(relative.BA ~ distance.to.climatic.centroid, data = clim.focal[clim.focal$sp == "FAGGRA",]))
summary(lm1 <- lm(relative.BA ~ distance.to.climatic.centroid, data = clim.focal[clim.focal$sp == "HAMVIR",]))
(lm1 <- lm(relative.BA ~ distance.to.climatic.centroid, data = clim.focal[clim.focal$sp == "SORAME",]))
summary(lm1 <- lm(relative.BA ~ distance.to.climatic.centroid, data = clim.focal[clim.focal$sp == "SORAME",]))
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/senior-moment/data")
source("Fig1-MDS.R")
library(vegan) # install.packages("vegan")
library(lme4)# install.packages("lme4")
library(scales)# install.packages("scales")
library(ggplot2) # install.packages("ggplot2")
library(plyr)
library(reshape)
library(dplyr)
library(tidyr)
library(reshape2)
source("Fig1-MDS.R")
source("Fig1-MDS.R")
overstory <- rename(overstory, c("Comp.Species" = "Species"))
d <- read.csv("all.species.dbh.csv", row.names = NULL)
d <- d[,1:3]
overstory <- distinct(d)
overstory <- rename(overstory, c("Comp.Species" = "Species"))
overstory <- rename(overstory, c("Comp.Species" = "Species"))
head(overstory)
?rename
library(vegan) # install.packages("vegan")
library(lme4)# install.packages("lme4")
library(scales)# install.packages("scales")
library(ggplot2) # install.packages("ggplot2")
library(plyr)
library(reshape)
source("Fig2-source.R")
overstory <- rename(overstory, c("Comp.Species" = "Species"))
source("Fig1-MDS.R")
library(vegan)
library(dplyr)
library(tidyr)
library(reshape)
library(plyr)
library(reshape2)
library(ggplot2)
rm(list = ls())
d <- read.csv("all.species.dbh.csv", row.names = NULL)
d <- d[,1:3]
overstory <- distinct(d)
head(overstory)
names(overstory)
d <- melt(overstory, id = "Individual", measure.vars = "Comp.Species" )
over.all <- as.data.frame(acast(d, Individual ~ value, length))
head(over.all)
over.all <- t(over.all)
head(over.all)
richness <- apply(over.all, 2, sum)
mds1 <- metaMDS(t(over.all), try = 100) # use t() to change it so that the communities are rows, and species are columns, which is the format that vegan uses
overcomp <- data.frame(mds1$points)
overcomp$s <- richness # add our species richness calculations to this data frame
overcomp$sp <- substr(rownames(overcomp), 1, 6)
overcomp$site <- unlist(
lapply(strsplit(rownames(overcomp), "_"),
function(x) x[[2]]))
overcomp$site <- as.factor(overcomp$site)
levels(overcomp$site) <- c(3, 1, 4, 2)
overcomp$site <- factor(as.numeric(as.character(overcomp$site)), labels = c("HF", "WM", "GR", "SH"))
colz = alpha(c("#E7298A", "#1B9E77", "#D95F02", "#7570B3"), 0.5)
plot(mds1, type = "n",
xlim = c(-2, 2),
ylim = c(-1.2, 2),
cex.lab = 2)
count = 1
for(i in unique(overcomp$site)){
ordihull(mds1, group = overcomp$site, label = F,
draw = "polygon", col = colz[count],
show.groups = i)
count = count + 1
}
legend("topleft",
fill = colz,
legend = c("Harvard Forest", "White Mountains", "Grant", "St. Hippolyte"),
bty = "n",
cex = 2)
legend("topleft",
fill = colz,
legend = c("Harvard Forest", "White Mountains", "Grant", "St. Hippolyte"),
bty = "n")
title("Overstory")
plot(mds1, type = "n",
xlim = c(-2, 2),
ylim = c(-1.2, 2))
count = 1
for(i in unique(overcomp$site)){
ordihull(mds1, group = overcomp$site, label = F,
draw = "polygon", col = colz[count],
show.groups = i)
count = count + 1
}
legend("topleft",
fill = colz,
legend = c("Harvard Forest", "White Mountains", "Grant", "St. Hippolyte"),
bty = "n")
title("Overstory")
invisible(mds2 <- metaMDS(t(d2), try = 100)) # use t() to change it so that the communities are rows, and species are columns, which is the format that vegan uses
library(vegan)
library(dplyr)
library(tidyr)
library(reshape)
library(plyr)
library(reshape2)
library(ggplot2)
rm(list = ls())
#setwd("~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/senior-moment/data")
# setwd("~/Documents/git/senior-moment/data") # For Dan
# MDS overstory
d <- read.csv("all.species.dbh.csv", row.names = NULL)
d <- d[,1:3]
#d <- d2[,-2]
# put data into correct format
overstory <- distinct(d)
head(overstory)
#overstory <- rename(overstory, c("Comp.Species" = "Species"))
# check
names(overstory)
# SOMETHING WRONG HERE
d <- melt(overstory, id = "Individual", measure.vars = "Comp.Species" )
over.all <- as.data.frame(acast(d, Individual ~ value, length))
head(over.all)
over.all <- t(over.all)
head(over.all)
# Analysis and summarizing richness of the overstory
richness <- apply(over.all, 2, sum)
invisible(mds1 <- metaMDS(t(over.all), try = 100)) # use t() to change it so that the communities are rows, and species are columns, which is the format that vegan uses
?invisible
overcomp <- data.frame(mds1$points)
overcomp$s <- richness # add our species richness calculations to this data frame
