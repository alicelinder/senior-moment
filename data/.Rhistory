## Visualize patterns
REUdata[,REUdata$Pirates.or.Ninjas] !== "Pirates" | REUdata[,REUdata$Pirates.or.Ninjas] !== "Ninjas"<- NA
REUdata[,REUdata$Pirates.or.Ninjas] != "Pirates" | REUdata[,REUdata$Pirates.or.Ninjas] != "Ninjas"<- NA
REUdata(![REUdata$Pirates.or.Ninjas] == "Pirates" | REUdata[,REUdata$Pirates.or.Ninjas] == "Ninjas"), REUdata$Pirates.or.Ninjas]<- NA
REUdata(![REUdata$Pirates.or.Ninjas == "Pirates" | REUdata[,REUdata$Pirates.or.Ninjas] == "Ninjas"), REUdata$Pirates.or.Ninjas]<- NA
REUdata(![REUdata$Pirates.or.Ninjas == "Pirates" | REUdata$Pirates.or.Ninjas == "Ninjas"), REUdata$Pirates.or.Ninjas]<- NA
REUdata!([REUdata$Pirates.or.Ninjas == "Pirates" | REUdata$Pirates.or.Ninjas == "Ninjas"), REUdata$Pirates.or.Ninjas]<- NA
REUdata!([REUdata$Pirates.or.Ninjas == "Pirates" | REUdata$Pirates.or.Ninjas == "Ninjas"), "Pirates.or.Ninjas"]<- NA
REUdata[!(REUdata$Pirates.or.Ninjas == "Pirates" | REUdata$Pirates.or.Ninjas == "Ninjas"), "Pirates.or.Ninjas"]<- NA
REUdata[!(REUdata[,"Pirates.or.Ninjas"] == "Pirates" | REUdata[,"Pirates.or.Ninjas"] == "Ninjas"), "Pirates.or.Ninjas"]<- NA
REUdata[!(REUdata[,"Pirates.or.Ninjas"] == "Pirates" | REUdata[,"Pirates.or.Ninjas"] == "Ninjas"),"Pirates.or.Ninjas"]<- NA
REUdata[!(REUdata[,"Pirates.or.Ninjas"] == "Pirates" | REUdata[,"Pirates.or.Ninjas"] == "Ninjas"),"Pirates.or.Ninjas"] <- NA
library(gdata)
d <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.xlsx")
install.packages("gdata")
library(gdata)
library(gdata)
install.packages("gdata")
d <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.xlsx")
install.packages("gdata")
d <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.xlsx")
library(gdata)
d <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.xlsx")
splist <- read.xls("~/Dropbox/Work/Harvard/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_arbres.xlsx")
splist <- read.xls("~/Dropbox/Work/Harvard/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_arbres.xlsx")
head(d)
names(d) <- c('no','Transect','sp','DBH','age')
names(splist) <- c('sp','Latin')
install.packages("spaa")
library(spaa)
splist <- read.xls("~/Dropbox/Work/Harvard/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_arbres.xlsx")
splist <- read.xls("~/Dropbox/Work/Harvard/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_arbres.xlsx")
head(d)
names(d) <- c('no','Transect','sp','DBH','age')
names(splist) <- c('sp','Latin')
d <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.csv")
install.packages("gdata")
install.packages("gdata")
library(gdata)
d <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.csv")
d <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.csv")
splist <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_arbres.csv")
head(d)
names(d) <- c('no','Transect','sp','DBH','age')
names(splist) <- c('sp','Latin')
library(ggplot2)
plot(age ~ DBH, data = d)
ggplot(d, aes(DBH, age, color = sp)) + geom_point()
(treesp <- sort(table(d$sp), decreasing=T))
(commonsp <- names(sort(table(d$sp), decreasing=T))[1:10])
treesp <- as.data.frame(treesp)
treesp$sp <- rownames(treesp)
treesp <- merge(splist, treesp)
treesp[order(treesp$treesp, decreasing=T),][1:10,]
d <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Herbacées.csv")
splist <- read.xls("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_herb.csv")
splist <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_herb.csv")
head(d)
names(d) <- c('no','Transect','sp','DBH','age')
names(splist) <- c('sp','Latin')
names(d) <- c('Transect','Code','recouv','herb')
names(splist) <- c('sp','Latin')
library(ggplot2)
(understorysp <- sort(table(d$sp), decreasing=T))
(commonundersp <- names(sort(table(d$sp), decreasing=T))[1:10])
d <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Herbacées.csv")
splist <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_herb.csv")
head(d)
names(d) <- c('Transect','Code','recouv','herb')
names(splist) <- c('sp','Latin')
library(ggplot2)
plot(age ~ DBH, data = d)
(understorysp <- sort(table(d$sp), decreasing=T))
(understorysp <- sort(table(d$Code), decreasing=T))
(commonundersp <- names(sort(table(d$Code), decreasing=T))[1:10])
(commonundersp <- names(sort(table(d$Code), decreasing=T))[1:15])
understorysp <- as.data.frame(understorysp)
understorysp$Code <- rownames(understorysp)
understorysp <- merge(splist, understorysp)
View(understorysp)
View(understorysp)
(understorysp <- sort(table(d$Code), decreasing=T))
(commonundersp <- names(sort(table(d$Code), decreasing=T))[1:15])
understorysp <- as.data.frame(understorysp)
understorysp$Code <- rownames(understorysp)
splist <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_herb.csv")
understorysp <- merge(splist, understorysp)
understorysp[order(understorysp$understorysp, decreasing=T),][1:10,]
understorysp[order(understorysp$understorysp, decreasing=T),][1:15,]
understorysp[order(understorysp$understorysp, decreasing=T),][1:20,]
View(treesp)
d <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/Dendrochronologie.csv")
splist <- read.csv("~/Dropbox/Summer 2016 Forest/Data/SH Vegetation Data/look_spp_arbres.csv")
head(d)
names(d) <- c('no','Transect','sp','DBH','age')
names(splist) <- c('sp','Latin')
library(ggplot2)
(treesp <- sort(table(d$sp), decreasing=T))
# Top 10 most common species
(commonsp <- names(sort(table(d$sp), decreasing=T))[1:10])
#
treesp <- as.data.frame(treesp)
treesp$sp <- rownames(treesp)
treesp <- merge(splist, treesp)
treesp[order(treesp$treesp, decreasing=T),][1:10,]
treesp[order(treesp$treesp, decreasing=T),][1:20,]
d <- read.csv("~/Dropbox/Summer 2016 Forest/Scripts/Sorame.csv")
head(d)
d <- d[!is.na(d$Latitude),]
library(maptools)
ds <- SpatialPointsDataFrame(d[,c("Longitude","Latitude")], d)
kmlPoints(ds, kmlfile = "SHind.kml", description = ds$Individual, name = ds$Individual)
write(dsk$content, file="WM.kml")
dsk <- kmlPoints(ds, kmlfile = "SHind.kml", description = ds$Individual, name = ds$Individual)
write(dsk$content, file="WM.kml")
rm(list=ls()) # remove everything currently held in the R memory
d <- read.csv("~/Dropbox/Summer 2016 Forest/Scripts/Sorame.csv")
head(d)
d <- d[!is.na(d$Latitude),]
library(maptools)
ds <- SpatialPointsDataFrame(d[,c("Longitude","Latitude")], d)
dsk <- kmlPoints(ds, kmlfile = "SHind.kml", description = ds$Individual, name = ds$Individual)
dsk <- kmlPoints(ds, kmlfile = "Sorame.kml", description = ds$Individual, name = ds$Individual)
write(dsk$content, file=".kml")
write(dsk$content, file="sorame.kml")
help("write")
kmlPoints(ds, kmlfile = "Sorame.kml", description = ds$Individual, name = ds$Individual)
write(ds$content, file="Sorame.kml")
sample(2:16, 2)
sample(2:16, 2, replace = FALSE)
? 'tapply'
? 'sapply'
help(apply)
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
dimnames(x)[[1]] <- letters[1:8]
apply(x, 2, mean, trim = .2)
col.sums <- apply(x, 2, sum)
row.sums <- apply(x, 1, sum)
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
View(x)
dimnames(x)[[1]] <- letters[1:8]
View(x)
apply(x, 2, mean, trim = .2)
col.sums <- apply(x, 2, sum)
row.sums <- apply(x, 1, sum)
rbind(cbind(x, Rtot = row.sums), Ctot = c(col.sums, sum(col.sums)))
stopifnot( apply(x, 2, is.vector))
apply(x, 2, sort)
names(dimnames(x)) <- c("row", "col")
x3 <- array(x, dim = c(dim(x),3),
dimnames = c(dimnames(x), list(C = paste0("cop.",1:3))))
identical(x,  apply( x,  2,  identity))
identical(x3, apply(x3, 2:3, identity))
cave <- function(x, c1, c2) c(mean(x[c1]), mean(x[c2]))
apply(x, 1, cave,  c1 = "x1", c2 = c("x1","x2"))
ma <- matrix(c(1:4, 1, 6:8), nrow = 2)
ma
apply(ma, 1, table)  #--> a list of length 2
apply(ma, 1, stats::quantile) # 5 x n matrix with rownames
rm(list = ls())
setwd("~/GitHub/senior-moment/data")
d <- read.csv("all.species.dbh.csv", row.names = NULL)
View(d)
d["Species"] <- sapply(d$Individual, substr(d$Individual, 1, 6))
d["Species"] <- sapply(d$Individual, substr(1,6))
d["Species"] <- sapply(d$Individual, substr(d[,1],1,6))
d["Species"] <- sapply(d$Individual, substr, d[,1], 1, 6)
d["Species"] <- sapply(d$Individual, substr, d[,1], 1)
View(d)
d["Species"] <- sapply(d$Individual, substr, d[,1], 1:6)
View(d)
rm(list = ls())
setwd("~/GitHub/senior-moment/data")
d <- read.csv("all.species.dbh.csv", row.names = NULL)
d["Species"] <- sapply(d$Individual, substr, d[,1], 1:6)
View(d)
d["Species"] <- sapply(d$Individual, substr, 1, 6)
View(d)
library(vegan)
library(dplyr)
library(tidyr)
library(reshape)
library(plyr)
library(reshape2)
rm(list = ls())
setwd("~/GitHub/senior-moment/data")
# MDS overstory
d <- read.csv("all.species.dbh.csv", row.names = NULL)
d <- d[,1:3]
#d <- d2[,-2]
# put data into correct format
overstory <- distinct(d)
overstory <- rename(overstory, c("Comp.Species" = "Species"))
# check
names(overstory)
# SOMETHING WRONG HERE
d <- melt(overstory, id = "Individual", measure.vars = "Species" )
over.all <- as.data.frame(acast(d, Individual ~ value, length))
head(over.all)
over.all <- t(over.all)
head(over.all)
summary(over.all)
# Analysis and summarizing richness of the overstory
richness <- apply(over.all, 2, sum)
mds1 <- metaMDS(t(over.all), try = 100) # use t() to change it so that the communities are rows, and species are columns, which is the format that vegan uses
plot(mds1) # ok, lots of scatter, good ordination
overcomp <- data.frame(mds1$points)
overcomp$s <- richness # add our species richness calculations to this data frame
overcomp$sp <- substr(rownames(overcomp), 1, 6)
# Get the site by getting the last two characters of the overcomp rownames
overcomp$site <- unlist(
lapply(strsplit(rownames(overcomp), "_"),
function(x) x[[2]]))
# For each species, plot the species richness by site. Order sites by south -> north
overcomp$site <- as.factor(overcomp$site)
levels(overcomp$site) <- c(3, 1, 4, 2)
overcomp$site <- factor(as.numeric(as.character(overcomp$site)), labels = c("HF", "WM", "GR", "SH"))
# Clear differences with site, changing space along MDS1
colz = alpha(c("#E7298A", "#1B9E77", "#D95F02", "#7570B3"), 0.5)
# plot MDS overstory
plot(mds1, type = "n",
xlim = c(-2, 2),
ylim = c(-1.2, 2)
)
count = 1
for(i in unique(overcomp$site)){
ordihull(mds1, group = overcomp$site, label = F,
draw = "polygon", col = colz[count],
show.groups = i)
count = count + 1
}
legend("topleft",
fill = colz,
legend = c("Harvard Forest", "White Mountains", "Grant", "St. Hippolyte"),
bty = "n",
cex = .75)
title("Overstory",
cex = 150)
rm(list = ls())
# plot MDS understory
d2 <- read.csv("understory.csv")
head(d2)
# Data cleaning
rownames(d2) = d2[,1] # move species names into rows
d2 <- d2[,-1]
head(d2)
# Analysis
# Summarizing the richness of the understory
summary(d2)
richness <- apply(d2, 2, sum)
mds2 <- metaMDS(t(d2), try = 100) # use t() to change it so that the communities are rows, and species are columns, which is the format that vegan uses
plot(mds2) # ok, lots of scatter, good ordination
undercomp <- data.frame(mds2$points)
undercomp$s <- richness # add our species richness calculations to this data frame
undercomp$sp <- substr(rownames(undercomp), 1, 6)
# Get the site by getting the last two characters of the undercomp rownames
undercomp$site <- unlist(
lapply(strsplit(rownames(undercomp), "_"),
function(x) x[[2]]))
# For each species, plot the species richness by site. Order sites by south -> north
undercomp$site <- as.factor(undercomp$site)
levels(undercomp$site) <- c(3, 1, 4, 2)
undercomp$site <- factor(as.numeric(as.character(undercomp$site)), labels = c("HF", "WM", "GR", "SH"))
# Clear differences with site, changing space along MDS1
colz = alpha(c("#E7298A", "#1B9E77", "#D95F02", "#7570B3"), 0.5)
plot(mds2, type = "n",
xlim = c(-1.5, 1.5),
ylim = c(-1.2, 2)
)
count = 1
for(i in unique(undercomp$site)){
ordihull(mds2, group = undercomp$site, label =F,
draw = "polygon", col = colz[count],
show.groups = i)
count = count + 1
}
legend("topleft",
fill = colz,
legend = c("Harvard Forest", "White Mountains", "Grant", "St. Hippolyte"),
bty = "n")
title("Understory",
cex = 150)
library(vegan)
library(dplyr)
library(tidyr)
library(reshape)
library(plyr)
library(reshape2)
rm(list = ls())
setwd("~/GitHub/senior-moment/data")
d <- read.csv("all.species.dbh.csv", row.names = NULL)
d <- d[,1:3]
overstory <- distinct(d)
overstory <- rename(overstory, c("Comp.Species" = "Species"))
names(overstory)
d <- melt(overstory, id = "Individual", measure.vars = "Species" )
over.all <- as.data.frame(acast(d, Individual ~ value, length))
head(over.all)
over.all <- t(over.all)
head(over.all)
summary(over.all)
richness <- apply(over.all, 2, sum)
mds1 <- metaMDS(t(over.all), try = 100) # use t() to change it so that the communities are rows, and species are columns, which is the format that vegan uses
plot(mds1) # ok, lots of scatter, good ordination
overcomp <- data.frame(mds1$points)
overcomp$s <- richness # add our species richness calculations to this data frame
overcomp$sp <- substr(rownames(overcomp), 1, 6)
overcomp$site <- unlist(
lapply(strsplit(rownames(overcomp), "_"),
function(x) x[[2]]))
overcomp$site <- as.factor(overcomp$site)
levels(overcomp$site) <- c(3, 1, 4, 2)
overcomp$site <- factor(as.numeric(as.character(overcomp$site)), labels = c("HF", "WM", "GR", "SH"))
colz = alpha(c("#E7298A", "#1B9E77", "#D95F02", "#7570B3"), 0.5)
plot(mds1, type = "n",
xlim = c(-2, 2),
ylim = c(-1.2, 2)
)
count = 1
for(i in unique(overcomp$site)){
ordihull(mds1, group = overcomp$site, label = F,
draw = "polygon", col = colz[count],
show.groups = i)
count = count + 1
}
legend("topleft",
fill = colz,
legend = c("Harvard Forest", "White Mountains", "Grant", "St. Hippolyte"),
bty = "n",
cex = .75)
title("Overstory",
cex = 150)
View(d)
?'colz'
??colx
??colz
library(ggplot2)
library(vegan)
library(dplyr)
library(tidyr)
library(reshape)
library(plyr)
library(reshape2)
library(ggplot2)
rm(list = ls())
setwd("~/GitHub/senior-moment/data")
d <- read.csv("all.species.dbh.csv", row.names = NULL)
d <- d[,1:3]
overstory <- distinct(d)
overstory <- rename(overstory, c("Comp.Species" = "Species"))
names(overstory)
d <- melt(overstory, id = "Individual", measure.vars = "Species" )
over.all <- as.data.frame(acast(d, Individual ~ value, length))
head(over.all)
over.all <- t(over.all)
head(over.all)
summary(over.all)
richness <- apply(over.all, 2, sum)
mds1 <- metaMDS(t(over.all), try = 100) # use t() to change it so that the communities are rows, and species are columns, which is the format that vegan uses
plot(mds1) # ok, lots of scatter, good ordination
overcomp <- data.frame(mds1$points)
overcomp$s <- richness # add our species richness calculations to this data frame
overcomp$sp <- substr(rownames(overcomp), 1, 6)
overcomp$site <- unlist(
lapply(strsplit(rownames(overcomp), "_"),
function(x) x[[2]]))
overcomp$site <- as.factor(overcomp$site)
levels(overcomp$site) <- c(3, 1, 4, 2)
overcomp$site <- factor(as.numeric(as.character(overcomp$site)), labels = c("HF", "WM", "GR", "SH"))
colz = alpha(c("#E7298A", "#1B9E77", "#D95F02", "#7570B3"), 0.5)
plot(mds1, type = "n",
xlim = c(-2, 2),
ylim = c(-1.2, 2)
)
count = 1
for(i in unique(overcomp$site)){
ordihull(mds1, group = overcomp$site, label = F,
draw = "polygon", col = colz[count],
show.groups = i)
count = count + 1
}
legend("topleft",
fill = colz,
legend = c("Harvard Forest", "White Mountains", "Grant", "St. Hippolyte"),
bty = "n",
cex = .75)
title("Overstory",
cex = 150)
colz = alpha(c("#E7298A", "#1B9E77", "#D95F02", "#7570B3"), 0.5)
plot(mds1, type = "n",
xlim = c(-2, 2),
ylim = c(-1.2, 2)
)
count = 1
for(i in unique(overcomp$site)){
ordihull(mds1, group = overcomp$site, label = F,
draw = "polygon", col = colz[count],
show.groups = i)
count = count + 1
}
legend("topleft",
fill = colz,
legend = c("Harvard Forest", "White Mountains", "Grant", "St. Hippolyte"),
bty = "n")
title("Overstory",
cex = 1.50)
for(i in unique(overcomp$site)){
ordihull(mds1, group = overcomp$site, label = F,
draw = "polygon", col = colz[count],
show.groups = i)
count = count + 1
}
legend("topleft",
fill = colz,
legend = c("Harvard Forest", "White Mountains", "Grant", "St. Hippolyte"),
bty = "n")
title("Overstory",
cex = 5)
colz = alpha(c("#E7298A", "#1B9E77", "#D95F02", "#7570B3"), 0.5)
plot(mds1, type = "n",
xlim = c(-2, 2),
ylim = c(-1.2, 2)
)
count = 1
for(i in unique(overcomp$site)){
ordihull(mds1, group = overcomp$site, label = F,
draw = "polygon", col = colz[count],
show.groups = i)
count = count + 1
}
legend("topleft",
fill = colz,
legend = c("Harvard Forest", "White Mountains", "Grant", "St. Hippolyte"),
bty = "n")
title("Overstory")
plot(mds1, type = "n",
xlim = c(-2, 2),
ylim = c(-1.2, 2)
)
count = 1
for(i in unique(overcomp$site)){
ordihull(mds1, group = overcomp$site, label = F,
draw = "polygon", col = colz[count],
show.groups = i)
count = count + 1
}
legend("topleft",
fill = colz,
legend = c("Harvard Forest", "White Mountains", "Grant", "St. Hippolyte"),
bty = "n",
cex = 1.5)
title("Overstory")
plot(mds1, type = "n",
xlim = c(-2, 2),
ylim = c(-1.2, 2)
)
count = 1
for(i in unique(overcomp$site)){
ordihull(mds1, group = overcomp$site, label = F,
draw = "polygon", col = colz[count],
show.groups = i)
count = count + 1
}
legend("topleft",
fill = colz,
legend = c("Harvard Forest", "White Mountains", "Grant", "St. Hippolyte"),
bty = "n",
cex = 1.2)
title("Overstory", cex.main = 1.5)
?'x.lab'
rm(list = ls())
setwd("~/GitHub/senior-moment/data")
d <- read.csv("all.species.dbh.csv", row.names = NULL)
d <- d[,1:3]
overstory <- distinct(d)
overstory <- rename(overstory, c("Comp.Species" = "Species"))
names(overstory)
d <- melt(overstory, id = "Individual", measure.vars = "Species" )
over.all <- as.data.frame(acast(d, Individual ~ value, length))
head(over.all)
over.all <- t(over.all)
head(over.all)
richness <- apply(over.all, 2, sum)
mds1 <- metaMDS(t(over.all), try = 100) # use t() to change it so that the communities are rows, and species are columns, which is the format that vegan uses
plot(mds1) # ok, lots of scatter, good ordination
overcomp <- data.frame(mds1$points)
overcomp$s <- richness # add our species richness calculations to this data frame
overcomp$sp <- substr(rownames(overcomp), 1, 6)
overcomp$site <- unlist(
lapply(strsplit(rownames(overcomp), "_"),
function(x) x[[2]]))
overcomp$site <- as.factor(overcomp$site)
levels(overcomp$site) <- c(3, 1, 4, 2)
overcomp$site <- factor(as.numeric(as.character(overcomp$site)), labels = c("HF", "WM", "GR", "SH"))
colz = alpha(c("#E7298A", "#1B9E77", "#D95F02", "#7570B3"), 0.5)
plot(mds1, type = "n",
xlim = c(-2, 2),
ylim = c(-1.2, 2),
cex.lab = 2)
count = 1
for(i in unique(overcomp$site)){
ordihull(mds1, group = overcomp$site, label = F,
draw = "polygon", col = colz[count],
show.groups = i)
count = count + 1
}
legend("topleft",
fill = colz,
legend = c("Harvard Forest", "White Mountains", "Grant", "St. Hippolyte"),
bty = "n",
cex = 2)
title("Overstory", cex.main = 3)
